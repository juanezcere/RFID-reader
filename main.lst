CCS PCM C Compiler, Version 5.045, 55890               15-jul-15 19:10

               Filename:   D:\ZabavyPrototype\main.lst

               ROM used:   1769 words (22%)
                           Largest free fragment is 2048
               RAM used:   71 (19%) at main() level
                           103 (28%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   51E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <16F876A.h> 
.................... //////////// Standard Header file for the PIC16F876A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F876A 
*
0060:  DATA 8C,22
0061:  DATA 53,28
0062:  DATA 45,29
0063:  DATA 41,27
0064:  DATA C4,27
0065:  DATA 0A,2A
0066:  DATA 41,29
0067:  DATA CA,22
0068:  DATA D4,20
0069:  DATA 00,00
006A:  DATA 0C,26
006B:  DATA CF,20
006C:  DATA C4,24
006D:  DATA CE,23
006E:  DATA 0A,28
006F:  DATA CC,22
0070:  DATA C1,29
0071:  DATA 45,10
0072:  DATA D7,20
0073:  DATA 49,2A
0074:  DATA 00,01
0075:  DATA 8C,22
0076:  DATA 52,29
0077:  DATA 4F,29
0078:  DATA 20,18
0079:  DATA 32,05
007A:  DATA D3,22
007B:  DATA 52,2B
007C:  DATA 45,29
007D:  DATA 20,27
007E:  DATA 4F,10
007F:  DATA C6,27
0080:  DATA 55,27
0081:  DATA 44,00
*
0199:  MOVF   0B,W
019A:  MOVWF  5E
019B:  BCF    0B.7
019C:  BSF    03.5
019D:  BSF    03.6
019E:  BSF    0C.7
019F:  BSF    0C.0
01A0:  NOP
01A1:  NOP
01A2:  BCF    03.5
01A3:  BCF    03.6
01A4:  BTFSC  5E.7
01A5:  BSF    0B.7
01A6:  BSF    03.6
01A7:  MOVF   0C,W
01A8:  ANDLW  7F
01A9:  BTFSC  03.2
01AA:  GOTO   1ED
01AB:  BCF    03.6
01AC:  MOVWF  5E
01AD:  BSF    03.6
01AE:  MOVF   0D,W
01AF:  BCF    03.6
01B0:  MOVWF  5F
01B1:  BSF    03.6
01B2:  MOVF   0F,W
01B3:  BCF    03.6
01B4:  MOVWF  60
01B5:  MOVF   5E,W
01B6:  MOVWF  6A
01B7:  CALL   16D
01B8:  MOVF   5F,W
01B9:  BSF    03.6
01BA:  MOVWF  0D
01BB:  BCF    03.6
01BC:  MOVF   60,W
01BD:  BSF    03.6
01BE:  MOVWF  0F
01BF:  BCF    03.6
01C0:  MOVF   0B,W
01C1:  MOVWF  61
01C2:  BCF    0B.7
01C3:  BSF    03.5
01C4:  BSF    03.6
01C5:  BSF    0C.7
01C6:  BSF    0C.0
01C7:  NOP
01C8:  NOP
01C9:  BCF    03.5
01CA:  BCF    03.6
01CB:  BTFSC  61.7
01CC:  BSF    0B.7
01CD:  BSF    03.6
01CE:  RLF    0C,W
01CF:  RLF    0E,W
01D0:  ANDLW  7F
01D1:  BTFSC  03.2
01D2:  GOTO   1ED
01D3:  BCF    03.6
01D4:  MOVWF  5E
01D5:  BSF    03.6
01D6:  MOVF   0D,W
01D7:  BCF    03.6
01D8:  MOVWF  5F
01D9:  BSF    03.6
01DA:  MOVF   0F,W
01DB:  BCF    03.6
01DC:  MOVWF  60
01DD:  MOVF   5E,W
01DE:  MOVWF  6A
01DF:  CALL   16D
01E0:  MOVF   5F,W
01E1:  BSF    03.6
01E2:  MOVWF  0D
01E3:  BCF    03.6
01E4:  MOVF   60,W
01E5:  BSF    03.6
01E6:  MOVWF  0F
01E7:  INCF   0D,F
01E8:  BTFSC  03.2
01E9:  INCF   0F,F
01EA:  BCF    03.6
01EB:  GOTO   199
01EC:  BSF    03.6
01ED:  BCF    03.6
01EE:  RETURN
*
0469:  BTFSC  03.1
046A:  GOTO   46E
046B:  MOVLW  72
046C:  MOVWF  04
046D:  BCF    03.7
046E:  CLRF   77
046F:  CLRF   78
0470:  CLRF   79
0471:  CLRF   7A
0472:  CLRF   72
0473:  CLRF   73
0474:  CLRF   74
0475:  CLRF   75
0476:  MOVF   71,W
0477:  IORWF  70,W
0478:  IORWF  6F,W
0479:  IORWF  6E,W
047A:  BTFSC  03.2
047B:  GOTO   4AC
047C:  MOVLW  20
047D:  MOVWF  76
047E:  BCF    03.0
047F:  RLF    6A,F
0480:  RLF    6B,F
0481:  RLF    6C,F
0482:  RLF    6D,F
0483:  RLF    72,F
0484:  RLF    73,F
0485:  RLF    74,F
0486:  RLF    75,F
0487:  MOVF   71,W
0488:  SUBWF  75,W
0489:  BTFSS  03.2
048A:  GOTO   495
048B:  MOVF   70,W
048C:  SUBWF  74,W
048D:  BTFSS  03.2
048E:  GOTO   495
048F:  MOVF   6F,W
0490:  SUBWF  73,W
0491:  BTFSS  03.2
0492:  GOTO   495
0493:  MOVF   6E,W
0494:  SUBWF  72,W
0495:  BTFSS  03.0
0496:  GOTO   4A6
0497:  MOVF   6E,W
0498:  SUBWF  72,F
0499:  MOVF   6F,W
049A:  BTFSS  03.0
049B:  INCFSZ 6F,W
049C:  SUBWF  73,F
049D:  MOVF   70,W
049E:  BTFSS  03.0
049F:  INCFSZ 70,W
04A0:  SUBWF  74,F
04A1:  MOVF   71,W
04A2:  BTFSS  03.0
04A3:  INCFSZ 71,W
04A4:  SUBWF  75,F
04A5:  BSF    03.0
04A6:  RLF    77,F
04A7:  RLF    78,F
04A8:  RLF    79,F
04A9:  RLF    7A,F
04AA:  DECFSZ 76,F
04AB:  GOTO   47E
04AC:  MOVF   72,W
04AD:  MOVWF  00
04AE:  INCF   04,F
04AF:  MOVF   73,W
04B0:  MOVWF  00
04B1:  INCF   04,F
04B2:  MOVF   74,W
04B3:  MOVWF  00
04B4:  INCF   04,F
04B5:  MOVF   75,W
04B6:  MOVWF  00
04B7:  RETURN
04B8:  MOVF   04,W
04B9:  MOVWF  62
04BA:  MOVLW  3B
04BB:  MOVWF  69
04BC:  MOVLW  9A
04BD:  MOVWF  68
04BE:  MOVLW  CA
04BF:  MOVWF  67
04C0:  CLRF   66
04C1:  MOVLW  0A
04C2:  MOVWF  64
04C3:  BSF    03.1
04C4:  MOVLW  5E
04C5:  MOVWF  04
04C6:  BCF    03.7
04C7:  MOVF   61,W
04C8:  MOVWF  6D
04C9:  MOVF   60,W
04CA:  MOVWF  6C
04CB:  MOVF   5F,W
04CC:  MOVWF  6B
04CD:  MOVF   5E,W
04CE:  MOVWF  6A
04CF:  MOVF   69,W
04D0:  MOVWF  71
04D1:  MOVF   68,W
04D2:  MOVWF  70
04D3:  MOVF   67,W
04D4:  MOVWF  6F
04D5:  MOVF   66,W
04D6:  MOVWF  6E
04D7:  CALL   469
04D8:  MOVF   78,W
04D9:  MOVF   77,F
04DA:  BTFSS  03.2
04DB:  GOTO   4EF
04DC:  MOVF   64,W
04DD:  XORLW  01
04DE:  BTFSC  03.2
04DF:  GOTO   4EF
04E0:  MOVF   62,W
04E1:  BTFSC  03.2
04E2:  GOTO   4F0
04E3:  ANDLW  0F
04E4:  SUBWF  64,W
04E5:  BTFSC  03.2
04E6:  GOTO   4E9
04E7:  BTFSC  03.0
04E8:  GOTO   4F5
04E9:  BTFSC  62.7
04EA:  GOTO   4F5
04EB:  BTFSC  62.6
04EC:  GOTO   4F0
04ED:  MOVLW  20
04EE:  GOTO   4F1
04EF:  CLRF   62
04F0:  MOVLW  30
04F1:  ADDWF  77,F
04F2:  MOVF   77,W
04F3:  MOVWF  6A
04F4:  CALL   16D
04F5:  BCF    03.1
04F6:  MOVF   69,W
04F7:  MOVWF  6D
04F8:  MOVF   68,W
04F9:  MOVWF  6C
04FA:  MOVF   67,W
04FB:  MOVWF  6B
04FC:  MOVF   66,W
04FD:  MOVWF  6A
04FE:  CLRF   71
04FF:  CLRF   70
0500:  CLRF   6F
0501:  MOVLW  0A
0502:  MOVWF  6E
0503:  CALL   469
0504:  MOVF   7A,W
0505:  MOVWF  69
0506:  MOVF   79,W
0507:  MOVWF  68
0508:  MOVF   78,W
0509:  MOVWF  67
050A:  MOVF   77,W
050B:  MOVWF  66
050C:  DECFSZ 64,F
050D:  GOTO   4C3
050E:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
0082:  MOVLW  6B
0083:  MOVWF  04
0084:  BCF    03.7
0085:  MOVF   00,W
0086:  BTFSC  03.2
0087:  GOTO   095
0088:  MOVLW  06
0089:  MOVWF  78
008A:  CLRF   77
008B:  DECFSZ 77,F
008C:  GOTO   08B
008D:  DECFSZ 78,F
008E:  GOTO   08A
008F:  MOVLW  7B
0090:  MOVWF  77
0091:  DECFSZ 77,F
0092:  GOTO   091
0093:  DECFSZ 00,F
0094:  GOTO   088
0095:  RETURN
*
050F:  MOVLW  03
0510:  SUBWF  5F,F
0511:  BTFSS  03.0
0512:  GOTO   51D
0513:  MOVLW  5F
0514:  MOVWF  04
0515:  BCF    03.7
0516:  MOVF   00,W
0517:  BTFSC  03.2
0518:  GOTO   51D
0519:  GOTO   51B
051A:  GOTO   51B
051B:  DECFSZ 00,F
051C:  GOTO   51A
051D:  RETURN
.................... #fuses NOWDT, HS, NOCPD,NOBROWNOUT, NOPROTECT, NOLVP 
.................... #use fast_io(all) 
.................... #use RS232(BAUD = 19200, BITS = 8, PARITY = N, XMIT = PIN_C6, RCV = PIN_C7) 
.................... #define COIN                     PIN_A1 
.................... #define SERVO                    PIN_A2 
.................... #define LEDSERVO                 PIN_A4 
.................... #define LCD_RS_PIN               PIN_B0 
.................... #define LCD_RW_PIN               PIN_B1 
.................... #define LCD_ENABLE_PIN           PIN_B2 
.................... #define LCD_DATA4                PIN_B4 
.................... #define LCD_DATA5                PIN_B5 
.................... #define LCD_DATA6                PIN_B6 
.................... #define LCD_DATA7                PIN_B7 
.................... #define CSID                     PIN_C0 
.................... #define MFRC522_CS               PIN_C1 
.................... #define MFRC522_RST              PIN_C2 
.................... #define MFRC522_SCK              PIN_C3 
.................... #define MFRC522_SI               PIN_C4 
.................... #define MFRC522_SO               PIN_C5 
.................... #define TX                       PIN_C6 
.................... #define RX                       PIN_C7 
.................... #include<RC522.h> 
.................... #define PCD_IDLE              0x00 
.................... #define PCD_AUTHENT           0x0E 
.................... #define PCD_RECEIVE           0x08 
.................... #define PCD_TRANSMIT          0x04 
.................... #define PCD_TRANSCEIVE        0x0C 
.................... #define PCD_RESETPHASE        0x0F 
.................... #define PCD_CALCCRC           0x03 
.................... #define PICC_REQIDL           0x26 
.................... #define PICC_REQALL           0x52 
.................... #define PICC_ANTICOLL         0x93 
.................... #define PICC_SElECTTAG        0x93 
.................... #define PICC_AUTHENT1A        0x60 
.................... #define PICC_AUTHENT1B        0x61 
.................... #define PICC_READ             0x30 
.................... #define PICC_WRITE            0xA0 
.................... #define PICC_DECREMENT        0xC0 
.................... #define PICC_INCREMENT        0xC1 
.................... #define PICC_RESTORE          0xC2 
.................... #define PICC_TRANSFER         0xB0 
.................... #define PICC_HALT             0x50 
.................... #define MI_OK                 0 
.................... #define MI_NOTAGERR           1 
.................... #define MI_ERR                2 
.................... #define RESERVED00            0x00     
.................... #define COMMANDREG            0x01     
.................... #define COMMIENREG            0x02     
.................... #define DIVLENREG             0x03     
.................... #define COMMIRQREG            0x04     
.................... #define DIVIRQREG             0x05 
.................... #define ERRORREG              0x06     
.................... #define STATUS1REG            0x07     
.................... #define STATUS2REG            0x08     
.................... #define FIFODATAREG           0x09 
.................... #define FIFOLEVELREG          0x0A 
.................... #define WATERLEVELREG         0x0B 
.................... #define CONTROLREG            0x0C 
.................... #define BITFRAMINGREG         0x0D 
.................... #define COLLREG               0x0E 
.................... #define RESERVED01            0x0F 
.................... #define RESERVED10            0x10 
.................... #define MODEREG               0x11 
.................... #define TXMODEREG             0x12 
.................... #define RXMODEREG             0x13 
.................... #define TXCONTROLREG          0x14 
.................... #define TXAUTOREG             0x15 
.................... #define TXSELREG              0x16 
.................... #define RXSELREG              0x17 
.................... #define RXTHRESHOLDREG        0x18 
.................... #define DEMODREG              0x19 
.................... #define RESERVED11            0x1A 
.................... #define RESERVED12            0x1B 
.................... #define MIFAREREG             0x1C 
.................... #define RESERVED13            0x1D 
.................... #define RESERVED14            0x1E 
.................... #define SERIALSPEEDREG        0x1F  
.................... #define RESERVED20            0x20   
.................... #define CRCRESULTREGM         0x21 
.................... #define CRCRESULTREGL         0x22 
.................... #define RESERVED21            0x23 
.................... #define MODWIDTHREG           0x24 
.................... #define RESERVED22            0x25 
.................... #define RFCFGREG              0x26 
.................... #define GSNREG                0x27 
.................... #define CWGSPREG              0x28 
.................... #define MODGSPREG             0x29 
.................... #define TMODEREG              0x2A 
.................... #define TPRESCALERREG         0x2B 
.................... #define TRELOADREGH           0x2C 
.................... #define TRELOADREGL           0x2D 
.................... #define TCOUNTERVALUEREGH     0x2E 
.................... #define TCOUNTERVALUEREGL     0x2F     
.................... #define RESERVED30            0x30 
.................... #define TESTSEL1REG           0x31 
.................... #define TESTSEL2REG           0x32 
.................... #define TESTPINENREG          0x33 
.................... #define TESTPINVALUEREG       0x34 
.................... #define TESTBUSREG            0x35 
.................... #define AUTOTESTREG           0x36 
.................... #define VERSIONREG            0x37 
.................... #define ANALOGTESTREG         0x38 
.................... #define TESTDAC1REG           0x39   
.................... #define TESTDAC2REG           0x3A    
.................... #define TESTADCREG            0x3B    
.................... #define RESERVED31            0x3C    
.................... #define RESERVED32            0x3D    
.................... #define RESERVED33            0x3E    
.................... #define RESERVED34            0x3F 
....................  
.................... unsigned int8 MFRC522_Rd(unsigned int8 Address){ 
*
022C:  BSF    03.5
022D:  CLRF   22
....................    unsigned int i, ucAddr; 
....................    unsigned int ucResult = 0; 
....................    output_bit(MFRC522_SCK, 0); 
022E:  BCF    03.5
022F:  BCF    07.3
....................    output_bit(MFRC522_CS, 0); 
0230:  BCF    07.1
....................    ucAddr = (((Address<<1)&0x7E)|0x80); 
0231:  BCF    03.0
0232:  RLF    7E,W
0233:  ANDLW  7E
0234:  IORLW  80
0235:  BSF    03.5
0236:  MOVWF  21
....................    for(i = 8; i > 0; i--){ 
0237:  MOVLW  08
0238:  MOVWF  20
0239:  MOVF   20,F
023A:  BTFSC  03.2
023B:  GOTO   250
....................       output_bit(MFRC522_SO, ((ucAddr&0x80) == 0x80)); 
023C:  MOVF   21,W
023D:  ANDLW  80
023E:  SUBLW  80
023F:  BTFSC  03.2
0240:  GOTO   245
0241:  BCF    03.5
0242:  BCF    07.5
0243:  GOTO   247
0244:  BSF    03.5
0245:  BCF    03.5
0246:  BSF    07.5
....................       output_bit(MFRC522_SCK, 1); 
0247:  BSF    07.3
....................       ucAddr <<= 1; 
0248:  BCF    03.0
0249:  BSF    03.5
024A:  RLF    21,F
....................       output_bit(MFRC522_SCK, 0); 
024B:  BCF    03.5
024C:  BCF    07.3
024D:  BSF    03.5
024E:  DECF   20,F
024F:  GOTO   239
....................    } 
....................    for(i = 8; i > 0; i--){ 
0250:  MOVLW  08
0251:  MOVWF  20
0252:  MOVF   20,F
0253:  BTFSC  03.2
0254:  GOTO   265
....................       output_bit(MFRC522_SCK, 1); 
0255:  BCF    03.5
0256:  BSF    07.3
....................       ucResult <<= 1; 
0257:  BCF    03.0
0258:  BSF    03.5
0259:  RLF    22,F
....................       ucResult |= (INT1) input(MFRC522_SI); 
025A:  MOVLW  00
025B:  BCF    03.5
025C:  BTFSC  07.4
025D:  MOVLW  01
025E:  BSF    03.5
025F:  IORWF  22,F
....................       output_bit(MFRC522_SCK, 0); 
0260:  BCF    03.5
0261:  BCF    07.3
0262:  BSF    03.5
0263:  DECF   20,F
0264:  GOTO   252
....................    } 
....................    output_bit(MFRC522_CS, 1); 
0265:  BCF    03.5
0266:  BSF    07.1
....................    output_bit(MFRC522_SCK, 1); 
0267:  BSF    07.3
....................    return ucResult; 
0268:  BSF    03.5
0269:  MOVF   22,W
026A:  MOVWF  78
026B:  BCF    03.5
026C:  RETURN
.................... } 
....................  
.................... void MFRC522_Wr(unsigned int8 Address, unsigned int8 value){ 
....................    unsigned int8 i, ucAddr; 
....................    output_bit(MFRC522_SCK, 0); 
*
01EF:  BCF    07.3
....................    output_bit(MFRC522_CS, 0); 
01F0:  BCF    07.1
....................    ucAddr = ((Address<<1)&0x7E); 
01F1:  BCF    03.0
01F2:  BSF    03.5
01F3:  RLF    20,W
01F4:  ANDLW  7E
01F5:  MOVWF  23
....................    for(i = 8; i > 0; i--){ 
01F6:  MOVLW  08
01F7:  MOVWF  22
01F8:  MOVF   22,F
01F9:  BTFSC  03.2
01FA:  GOTO   20F
....................       output_bit(MFRC522_SO, ((ucAddr&0x80) == 0x80)); 
01FB:  MOVF   23,W
01FC:  ANDLW  80
01FD:  SUBLW  80
01FE:  BTFSC  03.2
01FF:  GOTO   204
0200:  BCF    03.5
0201:  BCF    07.5
0202:  GOTO   206
0203:  BSF    03.5
0204:  BCF    03.5
0205:  BSF    07.5
....................       output_bit(MFRC522_SCK, 1); 
0206:  BSF    07.3
....................       ucAddr <<= 1; 
0207:  BCF    03.0
0208:  BSF    03.5
0209:  RLF    23,F
....................       output_bit(MFRC522_SCK, 0); 
020A:  BCF    03.5
020B:  BCF    07.3
020C:  BSF    03.5
020D:  DECF   22,F
020E:  GOTO   1F8
....................    } 
....................    for(i = 8; i > 0; i--){ 
020F:  MOVLW  08
0210:  MOVWF  22
0211:  MOVF   22,F
0212:  BTFSC  03.2
0213:  GOTO   228
....................       output_bit(MFRC522_SO, ((value&0x80) == 0x80)); 
0214:  MOVF   21,W
0215:  ANDLW  80
0216:  SUBLW  80
0217:  BTFSC  03.2
0218:  GOTO   21D
0219:  BCF    03.5
021A:  BCF    07.5
021B:  GOTO   21F
021C:  BSF    03.5
021D:  BCF    03.5
021E:  BSF    07.5
....................       output_bit(MFRC522_SCK, 1); 
021F:  BSF    07.3
....................       value <<= 1; 
0220:  BCF    03.0
0221:  BSF    03.5
0222:  RLF    21,F
....................       output_bit(MFRC522_SCK, 0); 
0223:  BCF    03.5
0224:  BCF    07.3
0225:  BSF    03.5
0226:  DECF   22,F
0227:  GOTO   211
....................    } 
....................    output_bit(MFRC522_CS, 1); 
0228:  BCF    03.5
0229:  BSF    07.1
....................    output_bit(MFRC522_SCK, 1); 
022A:  BSF    07.3
022B:  RETURN
.................... } 
....................  
.................... static void MFRC522_Clear_Bit(char addr, char mask){ 
*
026D:  CLRF   7D
....................    unsigned int8 tmp = 0x00; 
....................    tmp = MFRC522_Rd(addr) ; 
026E:  MOVF   7B,W
026F:  MOVWF  7E
0270:  CALL   22C
0271:  MOVF   78,W
0272:  MOVWF  7D
....................    MFRC522_Wr(addr, tmp&~mask);     
0273:  MOVF   7C,W
0274:  XORLW  FF
0275:  ANDWF  7D,W
0276:  MOVWF  7E
0277:  MOVF   7B,W
0278:  BSF    03.5
0279:  MOVWF  20
027A:  MOVF   7E,W
027B:  MOVWF  21
027C:  BCF    03.5
027D:  CALL   1EF
027E:  RETURN
.................... } 
....................  
.................... static void MFRC522_Set_Bit(char addr, char mask){     
027F:  CLRF   7D
....................    unsigned int8 tmp = 0x00; 
....................    tmp = MFRC522_Rd(addr) ;   
0280:  MOVF   7B,W
0281:  MOVWF  7E
0282:  CALL   22C
0283:  MOVF   78,W
0284:  MOVWF  7D
....................    MFRC522_Wr(addr, tmp|mask); 
0285:  MOVF   7D,W
0286:  IORWF  7C,W
0287:  MOVWF  7E
0288:  MOVF   7B,W
0289:  BSF    03.5
028A:  MOVWF  20
028B:  MOVF   7E,W
028C:  MOVWF  21
028D:  BCF    03.5
028E:  CALL   1EF
028F:  RETURN
.................... } 
....................  
.................... void MFRC522_Reset(){   
....................    output_bit(MFRC522_RST, 1) ; 
*
0292:  BSF    07.2
....................    delay_us(1); 
0293:  GOTO   294
0294:  GOTO   295
0295:  NOP
....................    output_bit(MFRC522_RST, 0) ; 
0296:  BCF    07.2
....................    delay_us(1); 
0297:  GOTO   298
0298:  GOTO   299
0299:  NOP
....................    output_bit(MFRC522_RST, 1) ; 
029A:  BSF    07.2
....................    delay_us(1); 
029B:  GOTO   29C
029C:  GOTO   29D
029D:  NOP
....................    MFRC522_Wr(COMMANDREG, PCD_RESETPHASE);  
029E:  MOVLW  01
029F:  BSF    03.5
02A0:  MOVWF  20
02A1:  MOVLW  0F
02A2:  MOVWF  21
02A3:  BCF    03.5
02A4:  CALL   1EF
....................    delay_us(1); 
02A5:  GOTO   2A6
02A6:  GOTO   2A7
02A7:  NOP
.................... } 
....................  
.................... void MFRC522_AntennaOn(){                                                
....................    unsigned int8 stt; 
....................    stt = MFRC522_Rd(TXCONTROLREG); 
*
02D6:  MOVLW  14
02D7:  MOVWF  7E
02D8:  CALL   22C
02D9:  MOVF   78,W
02DA:  MOVWF  5E
....................    MFRC522_Set_Bit(TXCONTROLREG, 0x03);  
02DB:  MOVLW  14
02DC:  MOVWF  7B
02DD:  MOVLW  03
02DE:  MOVWF  7C
02DF:  CALL   27F
.................... } 
....................  
.................... void MFRC522_AntennaOff(){ 
....................    MFRC522_Clear_Bit(TXCONTROLREG, 0x03);                                            
*
02D1:  MOVLW  14
02D2:  MOVWF  7B
02D3:  MOVLW  03
02D4:  MOVWF  7C
02D5:  CALL   26D
.................... } 
....................  
.................... void MFRC522_Init(){ 
....................    output_bit(MFRC522_CS, 1);   
*
0290:  BSF    07.1
....................    output_bit(MFRC522_RST , 1);  
0291:  BSF    07.2
....................    MFRC522_Reset();         
....................    MFRC522_Wr(TMODEREG, 0x8D); 
*
02A8:  MOVLW  2A
02A9:  BSF    03.5
02AA:  MOVWF  20
02AB:  MOVLW  8D
02AC:  MOVWF  21
02AD:  BCF    03.5
02AE:  CALL   1EF
....................    MFRC522_Wr(TPRESCALERREG, 0x3E); 
02AF:  MOVLW  2B
02B0:  BSF    03.5
02B1:  MOVWF  20
02B2:  MOVLW  3E
02B3:  MOVWF  21
02B4:  BCF    03.5
02B5:  CALL   1EF
....................    MFRC522_Wr(TRELOADREGL, 30); 
02B6:  MOVLW  2D
02B7:  BSF    03.5
02B8:  MOVWF  20
02B9:  MOVLW  1E
02BA:  MOVWF  21
02BB:  BCF    03.5
02BC:  CALL   1EF
....................    MFRC522_Wr(TRELOADREGH, 0); 
02BD:  MOVLW  2C
02BE:  BSF    03.5
02BF:  MOVWF  20
02C0:  CLRF   21
02C1:  BCF    03.5
02C2:  CALL   1EF
....................    MFRC522_Wr(TXAUTOREG, 0x40); 
02C3:  MOVLW  15
02C4:  BSF    03.5
02C5:  MOVWF  20
02C6:  MOVLW  40
02C7:  MOVWF  21
02C8:  BCF    03.5
02C9:  CALL   1EF
....................    MFRC522_Wr(MODEREG, 0x3D); 
02CA:  MOVLW  11
02CB:  BSF    03.5
02CC:  MOVWF  20
02CD:  MOVLW  3D
02CE:  MOVWF  21
02CF:  BCF    03.5
02D0:  CALL   1EF
....................    MFRC522_AntennaOff();              
....................    MFRC522_AntennaOn(); 
*
02E0:  BCF    0A.3
02E1:  BCF    0A.4
02E2:  GOTO   58D (RETURN)
.................... } 
....................  
.................... char MFRC522_ToCard(char command, char *sendData, char sendLen, char *backData, unsigned *backLen){ 
02E3:  MOVLW  02
02E4:  MOVWF  6F
02E5:  CLRF   70
02E6:  CLRF   71
....................    char _status = MI_ERR; 
....................    char irqEn = 0x00; 
....................    char waitIRq = 0x00;                 
....................    char lastBits; 
....................    char n; 
....................    unsigned i; 
....................    switch(command){ 
02E7:  MOVF   67,W
02E8:  XORLW  0E
02E9:  BTFSC  03.2
02EA:  GOTO   2EF
02EB:  XORLW  02
02EC:  BTFSC  03.2
02ED:  GOTO   2F4
02EE:  GOTO   2F9
....................    case PCD_AUTHENT:{ 
....................       irqEn = 0x12; 
02EF:  MOVLW  12
02F0:  MOVWF  70
....................       waitIRq = 0x10; 
02F1:  MOVLW  10
02F2:  MOVWF  71
....................       break; 
02F3:  GOTO   2F9
....................    } 
....................    case PCD_TRANSCEIVE:{ 
....................       irqEn = 0x77; 
02F4:  MOVLW  77
02F5:  MOVWF  70
....................       waitIRq = 0x30; 
02F6:  MOVLW  30
02F7:  MOVWF  71
....................       break; 
02F8:  GOTO   2F9
....................    } 
....................       default: 
....................       break; 
....................    } 
....................    MFRC522_Wr(COMMIENREG, irqEn | 0x80); 
02F9:  MOVF   70,W
02FA:  IORLW  80
02FB:  MOVWF  7B
02FC:  MOVLW  02
02FD:  BSF    03.5
02FE:  MOVWF  20
02FF:  MOVF   7B,W
0300:  MOVWF  21
0301:  BCF    03.5
0302:  CALL   1EF
....................    MFRC522_Clear_Bit(COMMIRQREG, 0x80); 
0303:  MOVLW  04
0304:  MOVWF  7B
0305:  MOVLW  80
0306:  MOVWF  7C
0307:  CALL   26D
....................    MFRC522_Set_Bit(FIFOLEVELREG, 0x80); 
0308:  MOVLW  0A
0309:  MOVWF  7B
030A:  MOVLW  80
030B:  MOVWF  7C
030C:  CALL   27F
....................    MFRC522_Wr(COMMANDREG, PCD_IDLE); 
030D:  MOVLW  01
030E:  BSF    03.5
030F:  MOVWF  20
0310:  CLRF   21
0311:  BCF    03.5
0312:  CALL   1EF
....................    for(i=0; i < sendLen; i++){ 
0313:  CLRF   74
0314:  MOVF   6A,W
0315:  SUBWF  74,W
0316:  BTFSC  03.0
0317:  GOTO   329
....................       MFRC522_Wr(FIFODATAREG, sendData[i]); 
0318:  MOVF   74,W
0319:  ADDWF  68,W
031A:  MOVWF  04
031B:  BCF    03.7
031C:  BTFSC  69.0
031D:  BSF    03.7
031E:  MOVF   00,W
031F:  MOVWF  7B
0320:  MOVLW  09
0321:  BSF    03.5
0322:  MOVWF  20
0323:  MOVF   7B,W
0324:  MOVWF  21
0325:  BCF    03.5
0326:  CALL   1EF
0327:  INCF   74,F
0328:  GOTO   314
....................    } 
....................       MFRC522_Wr(COMMANDREG, command); 
0329:  MOVLW  01
032A:  BSF    03.5
032B:  MOVWF  20
032C:  BCF    03.5
032D:  MOVF   67,W
032E:  BSF    03.5
032F:  MOVWF  21
0330:  BCF    03.5
0331:  CALL   1EF
....................    if(command == PCD_TRANSCEIVE){ 
0332:  MOVF   67,W
0333:  SUBLW  0C
0334:  BTFSS  03.2
0335:  GOTO   33B
....................       MFRC522_Set_Bit(BITFRAMINGREG, 0x80); 
0336:  MOVLW  0D
0337:  MOVWF  7B
0338:  MOVLW  80
0339:  MOVWF  7C
033A:  CALL   27F
....................    } 
....................    i = 0xFFFF;    
033B:  MOVLW  FF
033C:  MOVWF  74
....................    do{ 
....................       n = MFRC522_Rd(COMMIRQREG); 
033D:  MOVLW  04
033E:  MOVWF  7E
033F:  CALL   22C
0340:  MOVF   78,W
0341:  MOVWF  73
....................       i--; 
0342:  DECF   74,F
....................    } while(i && !(n & 0x01) && !(n & waitIRq)); 
0343:  MOVF   74,F
0344:  BTFSC  03.2
0345:  GOTO   34C
0346:  BTFSC  73.0
0347:  GOTO   34C
0348:  MOVF   73,W
0349:  ANDWF  71,W
034A:  BTFSC  03.2
034B:  GOTO   33D
....................    MFRC522_Clear_Bit(BITFRAMINGREG, 0x80);     
034C:  MOVLW  0D
034D:  MOVWF  7B
034E:  MOVLW  80
034F:  MOVWF  7C
0350:  CALL   26D
....................    if(i != 0){ 
0351:  MOVF   74,F
0352:  BTFSC  03.2
0353:  GOTO   3C4
....................       if(!(MFRC522_Rd(ERRORREG) & 0x1B)){ 
0354:  MOVLW  06
0355:  MOVWF  7E
0356:  CALL   22C
0357:  MOVF   78,W
0358:  ANDLW  1B
0359:  BTFSS  03.2
035A:  GOTO   3C2
....................          _status = MI_OK; 
035B:  CLRF   6F
....................          if(n & irqEn & 0x01){ 
035C:  MOVF   73,W
035D:  ANDWF  70,W
035E:  ANDLW  01
035F:  BTFSC  03.2
0360:  GOTO   363
....................             _status = MI_NOTAGERR;        
0361:  MOVLW  01
0362:  MOVWF  6F
....................          } 
....................          if (command == PCD_TRANSCEIVE){ 
0363:  MOVF   67,W
0364:  SUBLW  0C
0365:  BTFSS  03.2
0366:  GOTO   3C1
....................             n = MFRC522_Rd(FIFOLEVELREG); 
0367:  MOVLW  0A
0368:  MOVWF  7E
0369:  CALL   22C
036A:  MOVF   78,W
036B:  MOVWF  73
....................             lastBits = MFRC522_Rd(CONTROLREG) & 0x07; 
036C:  MOVLW  0C
036D:  MOVWF  7E
036E:  CALL   22C
036F:  MOVF   78,W
0370:  ANDLW  07
0371:  MOVWF  72
....................             if(lastBits){ 
0372:  MOVF   72,F
0373:  BTFSC  03.2
0374:  GOTO   386
....................                *backLen = (n-1) * 8 + lastBits; 
0375:  MOVF   6D,W
0376:  MOVWF  04
0377:  BCF    03.7
0378:  BTFSC  6E.0
0379:  BSF    03.7
037A:  MOVLW  01
037B:  SUBWF  73,W
037C:  MOVWF  77
037D:  RLF    77,F
037E:  RLF    77,F
037F:  RLF    77,F
0380:  MOVLW  F8
0381:  ANDWF  77,F
0382:  MOVF   77,W
0383:  ADDWF  72,W
0384:  MOVWF  00
....................             } else { 
0385:  GOTO   393
....................                *backLen = n * 8; 
0386:  MOVF   6D,W
0387:  MOVWF  04
0388:  BCF    03.7
0389:  BTFSC  6E.0
038A:  BSF    03.7
038B:  RLF    73,W
038C:  MOVWF  77
038D:  RLF    77,F
038E:  RLF    77,F
038F:  MOVLW  F8
0390:  ANDWF  77,F
0391:  MOVF   77,W
0392:  MOVWF  00
....................             } 
....................             if(n == 0){ 
0393:  MOVF   73,F
0394:  BTFSS  03.2
0395:  GOTO   398
....................                n = 1; 
0396:  MOVLW  01
0397:  MOVWF  73
....................             } 
....................             if (n > 16){ 
0398:  MOVF   73,W
0399:  SUBLW  10
039A:  BTFSC  03.0
039B:  GOTO   39E
....................                n = 16; 
039C:  MOVLW  10
039D:  MOVWF  73
....................             } 
....................             for(i = 0; i < n; i++){ 
039E:  CLRF   74
039F:  MOVF   73,W
03A0:  SUBWF  74,W
03A1:  BTFSC  03.0
03A2:  GOTO   3BA
....................                backData[i] = MFRC522_Rd(FIFODATAREG); 
03A3:  MOVF   74,W
03A4:  ADDWF  6B,W
03A5:  MOVWF  78
03A6:  MOVF   6C,W
03A7:  MOVWF  7A
03A8:  BTFSC  03.0
03A9:  INCF   7A,F
03AA:  MOVF   78,W
03AB:  MOVWF  7B
03AC:  MOVF   7A,W
03AD:  MOVWF  7C
03AE:  MOVLW  09
03AF:  MOVWF  7E
03B0:  CALL   22C
03B1:  MOVF   7B,W
03B2:  MOVWF  04
03B3:  BCF    03.7
03B4:  BTFSC  7C.0
03B5:  BSF    03.7
03B6:  MOVF   78,W
03B7:  MOVWF  00
03B8:  INCF   74,F
03B9:  GOTO   39F
....................             } 
....................             backData[i] = 0; 
03BA:  MOVF   74,W
03BB:  ADDWF  6B,W
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  BTFSC  6C.0
03BF:  BSF    03.7
03C0:  CLRF   00
....................          } 
....................       } else { 
03C1:  GOTO   3C4
....................          _status = MI_ERR; 
03C2:  MOVLW  02
03C3:  MOVWF  6F
....................       } 
....................    } 
....................    return _status; 
03C4:  MOVF   6F,W
03C5:  MOVWF  78
03C6:  RETURN
.................... } 
....................  
.................... char MFRC522_Request(char reqMode, char *TagType){ 
....................    char _status; 
....................    unsigned backBits;             
....................    MFRC522_Wr(BITFRAMINGREG, 0x07);  
*
03CD:  MOVLW  0D
03CE:  BSF    03.5
03CF:  MOVWF  20
03D0:  MOVLW  07
03D1:  MOVWF  21
03D2:  BCF    03.5
03D3:  CALL   1EF
....................    TagType[0] = reqMode; 
03D4:  MOVF   61,W
03D5:  MOVWF  04
03D6:  BCF    03.7
03D7:  BTFSC  62.0
03D8:  BSF    03.7
03D9:  MOVF   60,W
03DA:  MOVWF  00
....................    _status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits); 
03DB:  MOVLW  0C
03DC:  MOVWF  67
03DD:  MOVF   62,W
03DE:  MOVWF  69
03DF:  MOVF   61,W
03E0:  MOVWF  68
03E1:  MOVLW  01
03E2:  MOVWF  6A
03E3:  MOVF   62,W
03E4:  MOVWF  6C
03E5:  MOVF   61,W
03E6:  MOVWF  6B
03E7:  CLRF   6E
03E8:  MOVLW  64
03E9:  MOVWF  6D
03EA:  CALL   2E3
03EB:  MOVF   78,W
03EC:  MOVWF  63
....................    if((_status != MI_OK) || (backBits != 0x10)){ 
03ED:  MOVF   63,F
03EE:  BTFSS  03.2
03EF:  GOTO   3F4
03F0:  MOVF   64,W
03F1:  SUBLW  10
03F2:  BTFSC  03.2
03F3:  GOTO   3F6
....................       _status = MI_ERR; 
03F4:  MOVLW  02
03F5:  MOVWF  63
....................    } 
....................    return _status; 
03F6:  MOVF   63,W
03F7:  MOVWF  78
.................... } 
....................  
.................... void MFRC522_CRC(char *dataIn, char length, char *dataOut){ 
....................    char i, n; 
....................    MFRC522_Clear_Bit(DIVIRQREG, 0x04); 
....................    MFRC522_Set_Bit(FIFOLEVELREG, 0x80);     
....................    for(i = 0; i < length; i++){    
....................       MFRC522_Wr(FIFODATAREG, *dataIn++);    
....................    } 
....................    MFRC522_Wr(COMMANDREG, PCD_CALCCRC); 
....................    i = 0xFF; 
....................    do{ 
....................       n = MFRC522_Rd(DIVIRQREG); 
....................       i--; 
....................    } while(i && !(n & 0x04)); 
....................    dataOut[0] = MFRC522_Rd(CRCRESULTREGL); 
....................    dataOut[1] = MFRC522_Rd(CRCRESULTREGM);         
.................... } 
....................  
.................... char MFRC522_SelectTag(char *serNum){ 
....................    char i; 
....................    char _status; 
....................    char size; 
....................    unsigned recvBits; 
....................    char buffer[9]; 
....................    buffer[0] = PICC_SElECTTAG; 
....................    buffer[1] = 0x70; 
....................    for(i=2; i < 7; i++){ 
....................       buffer[i] = *serNum++; 
....................    } 
....................    MFRC522_CRC(buffer, 7, &buffer[7]);              
....................    _status = MFRC522_ToCard( PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits ); 
....................    if((_status == MI_OK) && (recvBits == 0x18)){ 
....................       size = buffer[0]; 
....................    } else { 
....................       size = 0; 
....................    } 
....................    return size; 
.................... } 
....................  
.................... void MFRC522_Halt(){ 
....................    unsigned unLen; 
....................    char buff[4]; 
....................    buff[0] = PICC_HALT; 
....................    buff[1] = 0; 
....................    MFRC522_CRC(buff, 2, &buff[2]); 
....................    MFRC522_Clear_Bit(STATUS2REG, 0x80); 
....................    MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen); 
....................    MFRC522_Clear_Bit(STATUS2REG, 0x08); 
.................... } 
....................  
.................... char MFRC522_AntiColl(char *serNum){ 
*
0408:  CLRF   65
....................    char _status; 
....................    char i; 
....................    char serNumCheck = 0; 
....................    unsigned unLen; 
....................    MFRC522_Wr(BITFRAMINGREG, 0x00); 
0409:  MOVLW  0D
040A:  BSF    03.5
040B:  MOVWF  20
040C:  CLRF   21
040D:  BCF    03.5
040E:  CALL   1EF
....................    serNum[0] = PICC_ANTICOLL; 
040F:  MOVF   61,W
0410:  MOVWF  04
0411:  BCF    03.7
0412:  BTFSC  62.0
0413:  BSF    03.7
0414:  MOVLW  93
0415:  MOVWF  00
....................    serNum[1] = 0x20; 
0416:  MOVLW  01
0417:  ADDWF  61,W
0418:  MOVWF  04
0419:  BCF    03.7
041A:  BTFSC  62.0
041B:  BSF    03.7
041C:  MOVLW  20
041D:  MOVWF  00
....................    MFRC522_Clear_Bit(STATUS2REG, 0x08); 
041E:  MOVLW  08
041F:  MOVWF  7B
0420:  MOVWF  7C
0421:  CALL   26D
....................    _status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen); 
0422:  MOVLW  0C
0423:  MOVWF  67
0424:  MOVF   62,W
0425:  MOVWF  69
0426:  MOVF   61,W
0427:  MOVWF  68
0428:  MOVLW  02
0429:  MOVWF  6A
042A:  MOVF   62,W
042B:  MOVWF  6C
042C:  MOVF   61,W
042D:  MOVWF  6B
042E:  CLRF   6E
042F:  MOVLW  66
0430:  MOVWF  6D
0431:  CALL   2E3
0432:  MOVF   78,W
0433:  MOVWF  63
....................    if(_status == MI_OK){ 
0434:  MOVF   63,F
0435:  BTFSS  03.2
0436:  GOTO   452
....................       for(i=0; i < 4; i++){ 
0437:  CLRF   64
0438:  MOVF   64,W
0439:  SUBLW  03
043A:  BTFSS  03.0
043B:  GOTO   446
....................          serNumCheck ^= serNum[i]; 
043C:  MOVF   64,W
043D:  ADDWF  61,W
043E:  MOVWF  04
043F:  BCF    03.7
0440:  BTFSC  62.0
0441:  BSF    03.7
0442:  MOVF   00,W
0443:  XORWF  65,F
0444:  INCF   64,F
0445:  GOTO   438
....................       } 
....................       if(serNumCheck != serNum[4]){ 
0446:  MOVLW  04
0447:  ADDWF  61,W
0448:  MOVWF  04
0449:  BCF    03.7
044A:  BTFSC  62.0
044B:  BSF    03.7
044C:  MOVF   00,W
044D:  SUBWF  65,W
044E:  BTFSC  03.2
044F:  GOTO   452
....................          _status = MI_ERR; 
0450:  MOVLW  02
0451:  MOVWF  63
....................       } 
....................    } 
....................    return _status; 
0452:  MOVF   63,W
0453:  MOVWF  78
.................... } 
....................  
.................... char MFRC522_isCard(char *TagType){ 
....................     if(MFRC522_Request(PICC_REQIDL, TagType) == MI_OK) return 1; 
*
03C7:  MOVLW  26
03C8:  MOVWF  60
03C9:  MOVF   5F,W
03CA:  MOVWF  62
03CB:  MOVF   5E,W
03CC:  MOVWF  61
*
03F8:  MOVF   78,F
03F9:  BTFSS  03.2
03FA:  GOTO   3FF
03FB:  MOVLW  01
03FC:  MOVWF  78
03FD:  GOTO   401
03FE:  GOTO   401
....................     else return 0;  
03FF:  MOVLW  00
0400:  MOVWF  78
0401:  BCF    0A.3
0402:  BCF    0A.4
0403:  GOTO   5A2 (RETURN)
.................... } 
....................  
.................... char MFRC522_ReadCardSerial(char *str){ 
....................    char _status;  
....................    _status = MFRC522_AntiColl(str); 
0404:  MOVF   5F,W
0405:  MOVWF  62
0406:  MOVF   5E,W
0407:  MOVWF  61
*
0454:  MOVF   78,W
0455:  MOVWF  60
....................    str[5] = 0; 
0456:  MOVLW  05
0457:  ADDWF  5E,W
0458:  MOVWF  04
0459:  BCF    03.7
045A:  BTFSC  5F.0
045B:  BSF    03.7
045C:  CLRF   00
....................    if(_status == MI_OK) return 1; 
045D:  MOVF   60,F
045E:  BTFSS  03.2
045F:  GOTO   464
0460:  MOVLW  01
0461:  MOVWF  78
0462:  GOTO   466
0463:  GOTO   466
....................    else return 0; 
0464:  MOVLW  00
0465:  MOVWF  78
0466:  BCF    0A.3
0467:  BCF    0A.4
0468:  GOTO   5A9 (RETURN)
.................... } 
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00DD:  BSF    03.5
00DE:  BSF    06.4
....................    output_float(LCD_DATA5); 
00DF:  BSF    06.5
....................    output_float(LCD_DATA6); 
00E0:  BSF    06.6
....................    output_float(LCD_DATA7); 
00E1:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00E2:  BCF    03.5
00E3:  BSF    06.1
....................    delay_cycles(1); 
00E4:  NOP
....................    lcd_output_enable(1); 
00E5:  BSF    06.2
....................    delay_cycles(1); 
00E6:  NOP
....................    high = lcd_read_nibble(); 
00E7:  CALL   0B2
00E8:  MOVF   78,W
00E9:  MOVWF  72
....................        
....................    lcd_output_enable(0); 
00EA:  BCF    06.2
....................    delay_cycles(1); 
00EB:  NOP
....................    lcd_output_enable(1); 
00EC:  BSF    06.2
....................    delay_us(1); 
00ED:  GOTO   0EE
00EE:  GOTO   0EF
00EF:  NOP
....................    low = lcd_read_nibble(); 
00F0:  CALL   0B2
00F1:  MOVF   78,W
00F2:  MOVWF  71
....................        
....................    lcd_output_enable(0); 
00F3:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F4:  BSF    03.5
00F5:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00F6:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00F7:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00F8:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00F9:  SWAPF  72,W
00FA:  MOVWF  77
00FB:  MOVLW  F0
00FC:  ANDWF  77,F
00FD:  MOVF   77,W
00FE:  IORWF  71,W
00FF:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00B2:  CLRF   73
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00B3:  MOVLW  00
00B4:  BTFSC  06.4
00B5:  MOVLW  01
00B6:  IORWF  73,F
....................    n |= input(LCD_DATA5) << 1; 
00B7:  MOVLW  00
00B8:  BTFSC  06.5
00B9:  MOVLW  01
00BA:  MOVWF  77
00BB:  BCF    03.0
00BC:  RLF    77,F
00BD:  MOVF   77,W
00BE:  IORWF  73,F
....................    n |= input(LCD_DATA6) << 2; 
00BF:  MOVLW  00
00C0:  BTFSC  06.6
00C1:  MOVLW  01
00C2:  MOVWF  77
00C3:  RLF    77,F
00C4:  RLF    77,F
00C5:  MOVLW  FC
00C6:  ANDWF  77,F
00C7:  MOVF   77,W
00C8:  IORWF  73,F
....................    n |= input(LCD_DATA7) << 3; 
00C9:  MOVLW  00
00CA:  BTFSC  06.7
00CB:  MOVLW  01
00CC:  MOVWF  77
00CD:  RLF    77,F
00CE:  RLF    77,F
00CF:  RLF    77,F
00D0:  MOVLW  F8
00D1:  ANDWF  77,F
00D2:  MOVF   77,W
00D3:  IORWF  73,F
....................     
....................    return(n); 
00D4:  MOVF   73,W
00D5:  MOVWF  78
....................   #else 
00D6:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0096:  BTFSC  72.0
0097:  GOTO   09A
0098:  BCF    06.4
0099:  GOTO   09B
009A:  BSF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
009B:  BTFSC  72.1
009C:  GOTO   09F
009D:  BCF    06.5
009E:  GOTO   0A0
009F:  BSF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00A0:  BTFSC  72.2
00A1:  GOTO   0A4
00A2:  BCF    06.6
00A3:  GOTO   0A5
00A4:  BSF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00A5:  BTFSC  72.3
00A6:  GOTO   0A9
00A7:  BCF    06.7
00A8:  GOTO   0AA
00A9:  BSF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00AA:  NOP
....................    lcd_output_enable(1); 
00AB:  BSF    06.2
....................    delay_us(2); 
00AC:  MOVLW  03
00AD:  MOVWF  77
00AE:  DECFSZ 77,F
00AF:  GOTO   0AE
....................    lcd_output_enable(0); 
00B0:  BCF    06.2
00B1:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00D7:  BSF    03.5
00D8:  BCF    06.2
....................    lcd_rs_tris(); 
00D9:  BCF    06.0
....................    lcd_rw_tris(); 
00DA:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00DB:  BCF    03.5
00DC:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0100:  MOVF   78,W
0101:  MOVWF  71
0102:  BTFSC  71.7
0103:  GOTO   0DE
....................    lcd_output_rs(address); 
0104:  BCF    03.5
0105:  MOVF   6F,F
0106:  BTFSS  03.2
0107:  GOTO   10A
0108:  BCF    06.0
0109:  GOTO   10B
010A:  BSF    06.0
....................    delay_cycles(1); 
010B:  NOP
....................    lcd_output_rw(0); 
010C:  BCF    06.1
....................    delay_cycles(1); 
010D:  NOP
....................    lcd_output_enable(0); 
010E:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
010F:  SWAPF  70,W
0110:  MOVWF  71
0111:  MOVLW  0F
0112:  ANDWF  71,F
0113:  MOVF   71,W
0114:  MOVWF  72
0115:  CALL   096
....................    lcd_send_nibble(n & 0xf); 
0116:  MOVF   70,W
0117:  ANDLW  0F
0118:  MOVWF  71
0119:  MOVWF  72
011A:  CALL   096
011B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
011C:  MOVLW  28
011D:  MOVWF  5F
011E:  MOVLW  0C
011F:  MOVWF  60
0120:  MOVLW  01
0121:  MOVWF  61
0122:  MOVLW  06
0123:  MOVWF  62
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0124:  BCF    06.2
....................    lcd_output_rs(0); 
0125:  BCF    06.0
....................    lcd_output_rw(0); 
0126:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0127:  BSF    03.5
0128:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0129:  BCF    06.5
....................    output_drive(LCD_DATA6); 
012A:  BCF    06.6
....................    output_drive(LCD_DATA7); 
012B:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
012C:  BCF    06.2
....................    lcd_rs_tris(); 
012D:  BCF    06.0
....................    lcd_rw_tris(); 
012E:  BCF    06.1
....................  #endif 
....................      
....................    delay_ms(15); 
012F:  MOVLW  0F
0130:  BCF    03.5
0131:  MOVWF  6B
0132:  CALL   082
....................    for(i=1;i<=3;++i) 
0133:  MOVLW  01
0134:  MOVWF  5E
0135:  MOVF   5E,W
0136:  SUBLW  03
0137:  BTFSS  03.0
0138:  GOTO   141
....................    { 
....................        lcd_send_nibble(3); 
0139:  MOVLW  03
013A:  MOVWF  72
013B:  CALL   096
....................        delay_ms(5); 
013C:  MOVLW  05
013D:  MOVWF  6B
013E:  CALL   082
013F:  INCF   5E,F
0140:  GOTO   135
....................    } 
....................     
....................    lcd_send_nibble(2); 
0141:  MOVLW  02
0142:  MOVWF  72
0143:  CALL   096
....................    delay_ms(5); 
0144:  MOVLW  05
0145:  MOVWF  6B
0146:  CALL   082
....................    for(i=0;i<=3;++i) 
0147:  CLRF   5E
0148:  MOVF   5E,W
0149:  SUBLW  03
014A:  BTFSS  03.0
014B:  GOTO   158
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014C:  MOVLW  5F
014D:  ADDWF  5E,W
014E:  MOVWF  04
014F:  BCF    03.7
0150:  MOVF   00,W
0151:  MOVWF  63
0152:  CLRF   6F
0153:  MOVF   63,W
0154:  MOVWF  70
0155:  CALL   0D7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0156:  INCF   5E,F
0157:  GOTO   148
0158:  BCF    0A.3
0159:  BCF    0A.4
015A:  GOTO   574 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
015B:  DECFSZ 6C,W
015C:  GOTO   15E
015D:  GOTO   161
....................       address=LCD_LINE_TWO; 
015E:  MOVLW  40
015F:  MOVWF  6D
0160:  GOTO   162
....................    else 
....................       address=0; 
0161:  CLRF   6D
....................       
....................    address+=x-1; 
0162:  MOVLW  01
0163:  SUBWF  6B,W
0164:  ADDWF  6D,F
....................    lcd_send_byte(0,0x80|address); 
0165:  MOVF   6D,W
0166:  IORLW  80
0167:  MOVWF  6E
0168:  CLRF   6F
0169:  MOVF   6E,W
016A:  MOVWF  70
016B:  CALL   0D7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
016C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
016D:  MOVF   6A,W
016E:  XORLW  07
016F:  BTFSC  03.2
0170:  GOTO   17B
0171:  XORLW  0B
0172:  BTFSC  03.2
0173:  GOTO   180
0174:  XORLW  06
0175:  BTFSC  03.2
0176:  GOTO   188
0177:  XORLW  02
0178:  BTFSC  03.2
0179:  GOTO   18E
017A:  GOTO   193
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
017B:  MOVLW  01
017C:  MOVWF  6B
017D:  MOVWF  6C
017E:  CALL   15B
017F:  GOTO   198
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0180:  CLRF   6F
0181:  MOVLW  01
0182:  MOVWF  70
0183:  CALL   0D7
....................                      delay_ms(2); 
0184:  MOVLW  02
0185:  MOVWF  6B
0186:  CALL   082
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0187:  GOTO   198
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0188:  MOVLW  01
0189:  MOVWF  6B
018A:  MOVLW  02
018B:  MOVWF  6C
018C:  CALL   15B
018D:  GOTO   198
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
018E:  CLRF   6F
018F:  MOVLW  10
0190:  MOVWF  70
0191:  CALL   0D7
0192:  GOTO   198
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0193:  MOVLW  01
0194:  MOVWF  6F
0195:  MOVF   6A,W
0196:  MOVWF  70
0197:  CALL   0D7
....................      #endif 
....................    } 
0198:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... char i = 0, Time = 0, UID[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, DatosTX[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, DatosRX[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; 
*
053D:  BCF    03.5
053E:  CLRF   2D
053F:  CLRF   2E
0540:  CLRF   2F
0541:  CLRF   30
0542:  CLRF   31
0543:  CLRF   32
0544:  CLRF   33
0545:  CLRF   34
0546:  CLRF   35
0547:  CLRF   36
0548:  CLRF   37
0549:  CLRF   38
054A:  CLRF   39
054B:  CLRF   3A
054C:  CLRF   3B
054D:  CLRF   3C
054E:  CLRF   3D
054F:  CLRF   3E
0550:  CLRF   3F
0551:  CLRF   40
0552:  CLRF   41
0553:  CLRF   42
0554:  CLRF   43
0555:  CLRF   44
0556:  CLRF   45
0557:  CLRF   46
0558:  CLRF   47
0559:  CLRF   48
055A:  CLRF   49
055B:  CLRF   4A
055C:  CLRF   4B
055D:  CLRF   4C
055E:  CLRF   4D
055F:  CLRF   4E
0560:  CLRF   4F
0561:  CLRF   50
0562:  CLRF   51
0563:  CLRF   52
.................... unsigned int TagType; 
.................... long long Precio = 0, Tarjeta = 0; 
....................  
.................... #int_RDA 
.................... void SerialInterrupt(){ 
....................    if(kbhit()){ 
*
0051:  BTFSS  0C.5
0052:  GOTO   05C
....................       DatosRX[i] = getc(); 
0053:  MOVLW  48
0054:  ADDWF  2B,W
0055:  MOVWF  04
0056:  BCF    03.7
0057:  BTFSS  0C.5
0058:  GOTO   057
0059:  MOVF   1A,W
005A:  MOVWF  00
....................       i++; 
005B:  INCF   2B,F
....................    } 
005C:  BCF    0C.5
005D:  BCF    0A.3
005E:  BCF    0A.4
005F:  GOTO   02D
.................... } 
....................  
.................... void main(){ 
*
051E:  MOVF   03,W
051F:  ANDLW  1F
0520:  MOVWF  03
0521:  MOVLW  40
0522:  BSF    03.5
0523:  MOVWF  19
0524:  MOVLW  A6
0525:  MOVWF  18
0526:  MOVLW  90
0527:  BCF    03.5
0528:  MOVWF  18
0529:  CLRF   2B
052A:  CLRF   2C
052B:  CLRF   57
052C:  CLRF   56
052D:  CLRF   55
052E:  CLRF   54
052F:  CLRF   5B
0530:  CLRF   5A
0531:  CLRF   59
0532:  CLRF   58
0533:  CLRF   5D
0534:  CLRF   5C
0535:  BSF    03.5
0536:  BSF    1F.0
0537:  BSF    1F.1
0538:  BSF    1F.2
0539:  BCF    1F.3
053A:  MOVLW  07
053B:  MOVWF  1C
053C:  BCF    03.7
....................    set_tris_a(0x00); 
*
0564:  MOVLW  00
0565:  BSF    03.5
0566:  MOVWF  05
....................    set_tris_b(0x00); 
0567:  MOVWF  06
....................    set_tris_c(0x90); 
0568:  MOVLW  90
0569:  MOVWF  07
....................    output_a(0x00); 
056A:  BCF    03.5
056B:  CLRF   05
....................    output_b(0x00); 
056C:  CLRF   06
....................    output_c(0x00); 
056D:  CLRF   07
....................    enable_interrupts(GLOBAL); 
056E:  MOVLW  C0
056F:  IORWF  0B,F
....................    enable_interrupts(INT_RDA); 
0570:  BSF    03.5
0571:  BSF    0C.5
....................    lcd_init(); 
0572:  BCF    03.5
0573:  GOTO   11C
....................    printf(lcd_putc, "\fESPERANDO\nTARJETA"); 
0574:  MOVLW  60
0575:  BSF    03.6
0576:  MOVWF  0D
0577:  MOVLW  00
0578:  MOVWF  0F
0579:  BCF    03.6
057A:  CALL   199
....................    DatosTX[1] = 0x00; 
057B:  CLRF   3E
....................    DatosTX[2] = 0x01; 
057C:  MOVLW  01
057D:  MOVWF  3F
....................    DatosTX[3] = 0x00; 
057E:  CLRF   40
....................    DatosTX[4] = 0x05;; 
057F:  MOVLW  05
0580:  MOVWF  41
....................    DatosTX[5] = UID[0]; 
0581:  MOVF   2D,W
0582:  MOVWF  42
....................    DatosTX[6] = UID[1]; 
0583:  MOVF   2E,W
0584:  MOVWF  43
....................    DatosTX[7] = UID[2]; 
0585:  MOVF   2F,W
0586:  MOVWF  44
....................    DatosTX[8] = UID[3]; 
0587:  MOVF   30,W
0588:  MOVWF  45
....................    DatosTX[9] = 0x00; 
0589:  CLRF   46
....................    DatosTX[10] = 0x0D; 
058A:  MOVLW  0D
058B:  MOVWF  47
....................    MFRC522_Init(); 
058C:  GOTO   290
....................    output_low(LEDSERVO); 
058D:  BCF    05.4
....................    for(i = 0; i <= 0xFE; i++){ 
058E:  CLRF   2B
058F:  MOVF   2B,W
0590:  SUBLW  FE
0591:  BTFSS  03.0
0592:  GOTO   59D
....................       output_high(SERVO); 
0593:  BSF    05.2
....................       delay_ms(1); 
0594:  MOVLW  01
0595:  MOVWF  6B
0596:  CALL   082
....................       output_low(SERVO); 
0597:  BCF    05.2
....................       delay_ms(3); 
0598:  MOVLW  03
0599:  MOVWF  6B
059A:  CALL   082
059B:  INCF   2B,F
059C:  GOTO   58F
....................    } 
....................    output_high(LEDSERVO); 
059D:  BSF    05.4
....................    while(TRUE){ 
....................       if(MFRC522_isCard(&TagType)){        
059E:  CLRF   5F
059F:  MOVLW  53
05A0:  MOVWF  5E
05A1:  GOTO   3C7
05A2:  MOVF   78,F
05A3:  BTFSC  03.2
05A4:  GOTO   6E7
....................          if(MFRC522_ReadCardSerial(&UID)){ 
05A5:  CLRF   5F
05A6:  MOVLW  2D
05A7:  MOVWF  5E
05A8:  GOTO   404
05A9:  MOVF   78,F
05AA:  BTFSC  03.2
05AB:  GOTO   6E7
....................             DatosTX[5] = UID[0]; 
05AC:  MOVF   2D,W
05AD:  MOVWF  42
....................             DatosTX[6] = UID[1]; 
05AE:  MOVF   2E,W
05AF:  MOVWF  43
....................             DatosTX[7] = UID[2]; 
05B0:  MOVF   2F,W
05B1:  MOVWF  44
....................             DatosTX[8] = UID[3]; 
05B2:  MOVF   30,W
05B3:  MOVWF  45
....................             for(i = 0; i <= 10; i++){ 
05B4:  CLRF   2B
05B5:  MOVF   2B,W
05B6:  SUBLW  0A
05B7:  BTFSS  03.0
05B8:  GOTO   5C0
....................                DatosRX[i] = 0x00; 
05B9:  MOVLW  48
05BA:  ADDWF  2B,W
05BB:  MOVWF  04
05BC:  BCF    03.7
05BD:  CLRF   00
05BE:  INCF   2B,F
05BF:  GOTO   5B5
....................             } 
....................             printf(lcd_putc, "\fLOADING\nPLEASE WAIT"); 
05C0:  MOVLW  6A
05C1:  BSF    03.6
05C2:  MOVWF  0D
05C3:  MOVLW  00
05C4:  MOVWF  0F
05C5:  BCF    03.6
05C6:  CALL   199
....................             DatosTX[0] = 0x69; 
05C7:  MOVLW  69
05C8:  MOVWF  3D
....................             for(i = 0; i <= 10; i++){ 
05C9:  CLRF   2B
05CA:  MOVF   2B,W
05CB:  SUBLW  0A
05CC:  BTFSS  03.0
05CD:  GOTO   5DD
....................                putc(DatosTX[i]); 
05CE:  MOVLW  3D
05CF:  ADDWF  2B,W
05D0:  MOVWF  04
05D1:  BCF    03.7
05D2:  MOVF   00,W
05D3:  MOVWF  5E
05D4:  MOVF   5E,W
05D5:  BTFSS  0C.4
05D6:  GOTO   5D5
05D7:  MOVWF  19
....................                delay_ms(1); 
05D8:  MOVLW  01
05D9:  MOVWF  6B
05DA:  CALL   082
05DB:  INCF   2B,F
05DC:  GOTO   5CA
....................             } 
....................             i = 0; 
05DD:  CLRF   2B
....................             Time = 0; 
05DE:  CLRF   2C
....................             while(DatosRX[10] == 0x00){ 
05DF:  MOVF   52,F
05E0:  BTFSS  03.2
05E1:  GOTO   5F9
....................                delay_ms(10); 
05E2:  MOVLW  0A
05E3:  MOVWF  6B
05E4:  CALL   082
....................                Time++; 
05E5:  INCF   2C,F
....................                if(Time == 0xFF){ 
05E6:  INCFSZ 2C,W
05E7:  GOTO   5F8
....................                   printf(lcd_putc, "\fERROR 02\nSERVER NO FOUND"); 
05E8:  MOVLW  75
05E9:  BSF    03.6
05EA:  MOVWF  0D
05EB:  MOVLW  00
05EC:  MOVWF  0F
05ED:  BCF    03.6
05EE:  CALL   199
....................                   delay_ms(3000); 
05EF:  MOVLW  0C
05F0:  MOVWF  5E
05F1:  MOVLW  FA
05F2:  MOVWF  6B
05F3:  CALL   082
05F4:  DECFSZ 5E,F
05F5:  GOTO   5F1
....................                   reset_cpu(); 
05F6:  CLRF   0A
05F7:  GOTO   000
....................                } 
05F8:  GOTO   5DF
....................             } 
....................             if((DatosTX[0] == DatosRX[0]) && (DatosTX[1] == DatosRX[1]) && (DatosTX[2] == DatosRX[2]) && (DatosTX[3] == DatosRX[3]) && (DatosTX[4] == DatosRX[4])){ 
05F9:  MOVF   48,W
05FA:  SUBWF  3D,W
05FB:  BTFSS  03.2
05FC:  GOTO   6E7
05FD:  MOVF   49,W
05FE:  SUBWF  3E,W
05FF:  BTFSS  03.2
0600:  GOTO   6E7
0601:  MOVF   4A,W
0602:  SUBWF  3F,W
0603:  BTFSS  03.2
0604:  GOTO   6E7
0605:  MOVF   4B,W
0606:  SUBWF  40,W
0607:  BTFSS  03.2
0608:  GOTO   6E7
0609:  MOVF   4C,W
060A:  SUBWF  41,W
060B:  BTFSS  03.2
060C:  GOTO   6E7
....................                Precio = ((DatosRX[5] * 16777216) + (DatosRX[6] * 65536) + (DatosRX[7] * 256) + DatosRX[8]); 
060D:  CLRF   78
060E:  CLRF   79
060F:  CLRF   7A
0610:  MOVF   4D,W
0611:  MOVWF  61
0612:  CLRF   5E
0613:  CLRF   5F
0614:  CLRF   60
0615:  MOVF   4E,W
0616:  MOVWF  77
0617:  CLRF   78
0618:  CLRF   79
0619:  CLRF   7A
061A:  MOVF   78,W
061B:  MOVWF  7A
061C:  CLRF   77
061D:  CLRF   78
061E:  MOVF   77,W
061F:  ADDWF  5E,F
0620:  MOVF   78,W
0621:  BTFSC  03.0
0622:  INCFSZ 78,W
0623:  ADDWF  5F,F
0624:  MOVF   4E,W
0625:  BTFSC  03.0
0626:  INCFSZ 4E,W
0627:  ADDWF  60,F
0628:  MOVF   7A,W
0629:  BTFSC  03.0
062A:  INCFSZ 7A,W
062B:  ADDWF  61,F
062C:  CLRF   7A
062D:  MOVLW  00
062E:  ADDWF  5E,F
062F:  MOVF   4F,W
0630:  BTFSC  03.0
0631:  INCFSZ 4F,W
0632:  ADDWF  5F,F
0633:  MOVLW  00
0634:  BTFSC  03.0
0635:  MOVLW  01
0636:  ADDWF  60,F
0637:  MOVLW  00
0638:  BTFSC  03.0
0639:  MOVLW  01
063A:  ADDWF  61,F
063B:  MOVF   50,W
063C:  ADDWF  5E,W
063D:  MOVWF  54
063E:  MOVF   5F,W
063F:  MOVWF  55
0640:  MOVLW  00
0641:  BTFSC  03.0
0642:  MOVLW  01
0643:  ADDWF  55,F
0644:  MOVF   60,W
0645:  MOVWF  56
0646:  MOVLW  00
0647:  BTFSC  03.0
0648:  MOVLW  01
0649:  ADDWF  56,F
064A:  MOVF   61,W
064B:  MOVWF  57
064C:  MOVLW  00
064D:  BTFSC  03.0
064E:  MOVLW  01
064F:  ADDWF  57,F
....................                Tarjeta = ((DatosTX[5] * 16777216) + (DatosTX[6] * 65536) + (DatosTX[7] * 256) + DatosTX[8]); 
0650:  CLRF   78
0651:  CLRF   79
0652:  CLRF   7A
0653:  MOVF   42,W
0654:  MOVWF  61
0655:  CLRF   5E
0656:  CLRF   5F
0657:  CLRF   60
0658:  MOVF   43,W
0659:  MOVWF  77
065A:  CLRF   78
065B:  CLRF   79
065C:  CLRF   7A
065D:  MOVF   78,W
065E:  MOVWF  7A
065F:  CLRF   77
0660:  CLRF   78
0661:  MOVF   77,W
0662:  ADDWF  5E,F
0663:  MOVF   78,W
0664:  BTFSC  03.0
0665:  INCFSZ 78,W
0666:  ADDWF  5F,F
0667:  MOVF   43,W
0668:  BTFSC  03.0
0669:  INCFSZ 43,W
066A:  ADDWF  60,F
066B:  MOVF   7A,W
066C:  BTFSC  03.0
066D:  INCFSZ 7A,W
066E:  ADDWF  61,F
066F:  CLRF   7A
0670:  MOVLW  00
0671:  ADDWF  5E,F
0672:  MOVF   44,W
0673:  BTFSC  03.0
0674:  INCFSZ 44,W
0675:  ADDWF  5F,F
0676:  MOVLW  00
0677:  BTFSC  03.0
0678:  MOVLW  01
0679:  ADDWF  60,F
067A:  MOVLW  00
067B:  BTFSC  03.0
067C:  MOVLW  01
067D:  ADDWF  61,F
067E:  MOVF   45,W
067F:  ADDWF  5E,W
0680:  MOVWF  58
0681:  MOVF   5F,W
0682:  MOVWF  59
0683:  MOVLW  00
0684:  BTFSC  03.0
0685:  MOVLW  01
0686:  ADDWF  59,F
0687:  MOVF   60,W
0688:  MOVWF  5A
0689:  MOVLW  00
068A:  BTFSC  03.0
068B:  MOVLW  01
068C:  ADDWF  5A,F
068D:  MOVF   61,W
068E:  MOVWF  5B
068F:  MOVLW  00
0690:  BTFSC  03.0
0691:  MOVLW  01
0692:  ADDWF  5B,F
....................                printf(lcd_putc, "\f%Lu\n$%Lu", Tarjeta, Precio); 
0693:  MOVLW  0C
0694:  MOVWF  6A
0695:  CALL   16D
0696:  MOVLW  41
0697:  MOVWF  04
0698:  MOVF   5B,W
0699:  MOVWF  61
069A:  MOVF   5A,W
069B:  MOVWF  60
069C:  MOVF   59,W
069D:  MOVWF  5F
069E:  MOVF   58,W
069F:  MOVWF  5E
06A0:  CALL   4B8
06A1:  MOVLW  0A
06A2:  MOVWF  6A
06A3:  CALL   16D
06A4:  MOVLW  24
06A5:  MOVWF  6A
06A6:  CALL   16D
06A7:  MOVLW  41
06A8:  MOVWF  04
06A9:  MOVF   57,W
06AA:  MOVWF  61
06AB:  MOVF   56,W
06AC:  MOVWF  60
06AD:  MOVF   55,W
06AE:  MOVWF  5F
06AF:  MOVF   54,W
06B0:  MOVWF  5E
06B1:  CALL   4B8
....................                output_low(LEDSERVO); 
06B2:  BCF    05.4
....................                for(i = 0; i <= 0xFE; i++){ 
06B3:  CLRF   2B
06B4:  MOVF   2B,W
06B5:  SUBLW  FE
06B6:  BTFSS  03.0
06B7:  GOTO   6D0
....................                   output_high(SERVO); 
06B8:  BSF    05.2
....................                   delay_ms(1); 
06B9:  MOVLW  01
06BA:  MOVWF  6B
06BB:  CALL   082
....................                   delay_us(500); 
06BC:  MOVLW  02
06BD:  MOVWF  5E
06BE:  MOVLW  F9
06BF:  MOVWF  5F
06C0:  CALL   50F
06C1:  DECFSZ 5E,F
06C2:  GOTO   6BE
....................                   output_low(SERVO); 
06C3:  BCF    05.2
....................                   delay_ms(2); 
06C4:  MOVLW  02
06C5:  MOVWF  6B
06C6:  CALL   082
....................                   delay_us(500); 
06C7:  MOVLW  02
06C8:  MOVWF  5E
06C9:  MOVLW  F9
06CA:  MOVWF  5F
06CB:  CALL   50F
06CC:  DECFSZ 5E,F
06CD:  GOTO   6C9
06CE:  INCF   2B,F
06CF:  GOTO   6B4
....................                } 
....................                delay_ms(5000); 
06D0:  MOVLW  14
06D1:  MOVWF  5E
06D2:  MOVLW  FA
06D3:  MOVWF  6B
06D4:  CALL   082
06D5:  DECFSZ 5E,F
06D6:  GOTO   6D2
....................                for(i = 0; i <= 0xFE; i++){ 
06D7:  CLRF   2B
06D8:  MOVF   2B,W
06D9:  SUBLW  FE
06DA:  BTFSS  03.0
06DB:  GOTO   6E6
....................                   output_high(SERVO); 
06DC:  BSF    05.2
....................                   delay_ms(1); 
06DD:  MOVLW  01
06DE:  MOVWF  6B
06DF:  CALL   082
....................                   output_low(SERVO); 
06E0:  BCF    05.2
....................                   delay_ms(3); 
06E1:  MOVLW  03
06E2:  MOVWF  6B
06E3:  CALL   082
06E4:  INCF   2B,F
06E5:  GOTO   6D8
....................                } 
....................                output_high(LEDSERVO); 
06E6:  BSF    05.4
....................             } 
....................          } 
....................       } 
06E7:  GOTO   59E
....................    } 
....................  
.................... } 
06E8:  SLEEP

Configuration Fuses:
   Word  1: 2F02   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
