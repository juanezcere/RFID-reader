F N "J" 0 27 ""
D G "__PCM__" 0 27 ""5.045""
D G "__DEVICE__" 0 27 "876"
D G "__DATE__" 0 27 ""15-jul-15""
D G "__TIME__" 0 27 ""19:10:26""
D G "_UNICODE" 0 27 ""?"" "Standard Header file for the PIC16F876A device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "get_tris_a" 1 40 ""
f B "get_tris_a" 1 40 "int8()" `59 
f N "get_tris_b" 1 41 ""
f B "get_tris_b" 1 41 "int8()" `60 
f N "get_tris_c" 1 42 ""
f B "get_tris_c" 1 42 "int8()" `61 
f N "output_a" 1 43 ""
v L "value" 1 43 "int8" `63 
f B "output_a" 1 43 "void(int8 value)" `62 
f N "output_b" 1 44 ""
v L "value" 1 44 "int8" `65 
f B "output_b" 1 44 "void(int8 value)" `64 
f N "output_c" 1 45 ""
v L "value" 1 45 "int8" `67 
f B "output_c" 1 45 "void(int8 value)" `66 
f N "input_a" 1 46 ""
f B "input_a" 1 46 "int8()" `68 
f N "input_b" 1 47 ""
f B "input_b" 1 47 "int8()" `69 
f N "input_c" 1 48 ""
f B "input_c" 1 48 "int8()" `70 
f N "input_change_a" 1 49 ""
f B "input_change_a" 1 49 "int8()" `71 
f N "input_change_b" 1 50 ""
f B "input_change_b" 1 50 "int8()" `72 
f N "input_change_c" 1 51 ""
f B "input_change_c" 1 51 "int8()" `73 
f N "port_b_pullups" 1 52 ""
v L "value" 1 52 "int8" `75 
f B "port_b_pullups" 1 52 "void(int8 value)" `74 
f N "input" 1 53 ""
v L "pin" 1 53 "int16" `77 
f B "input" 1 53 "int8(int16 pin)" `76 
f N "input_state" 1 54 ""
v L "pin" 1 54 "int16" `79 
f B "input_state" 1 54 "int8(int16 pin)" `78 
f N "output_low" 1 55 ""
v L "pin" 1 55 "int16" `81 
f B "output_low" 1 55 "void(int16 pin)" `80 
f N "output_high" 1 56 ""
v L "pin" 1 56 "int16" `83 
f B "output_high" 1 56 "void(int16 pin)" `82 
f N "output_toggle" 1 57 ""
v L "pin" 1 57 "int16" `85 
f B "output_toggle" 1 57 "void(int16 pin)" `84 
f N "output_bit" 1 58 ""
v L "pin" 1 58 "int16" `87 
v L "level" 1 58 "int8" `88 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `86 
f N "output_float" 1 59 ""
v L "pin" 1 59 "int16" `90 
f B "output_float" 1 59 "void(int16 pin)" `89 
f N "output_drive" 1 60 ""
v L "pin" 1 60 "int16" `92 
f B "output_drive" 1 60 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "FALSE" 1 90 "0"
d G "TRUE" 1 91 "1"
d G "BYTE" 1 93 "int8"
d G "BOOLEAN" 1 94 "int1"
d G "getc" 1 96 "getch"
d G "fgetc" 1 97 "getch"
d G "getchar" 1 98 "getch"
d G "putc" 1 99 "putchar"
d G "fputc" 1 100 "putchar"
d G "fgets" 1 101 "gets"
d G "fputs" 1 102 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 107 ""
f B "restart_cause" 1 107 "int8()" `93 
f N "reset_cpu" 1 108 ""
f B "reset_cpu" 1 108 "void()" `94 
f N "sleep" 1 109 ""
f B "sleep" 1 109 "void()" `95  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 111 "3"
d G "WDT_TIMEOUT" 1 112 "11"
d G "MCLR_FROM_SLEEP" 1 113 "19"
d G "MCLR_FROM_RUN" 1 114 "27"
d G "NORMAL_POWER_UP" 1 115 "25"
d G "BROWNOUT_RESTART" 1 116 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 123 ""
v L "mode" 1 123 "int8" `97 
f B "setup_timer_0" 1 123 "void(int8 mode)" `96 
f N "set_timer0" 1 124 ""
v L "value" 1 124 "int8" `99 
f B "set_timer0" 1 124 "void(int8 value)" `98 
f N "get_timer0" 1 125 ""
f B "get_timer0" 1 125 "int8()" `100 
f N "setup_counters" 1 126 ""
v L "mode" 1 126 "int8" `102 
v L "prescaler" 1 126 "int8" `103 
f B "setup_counters" 1 126 "void(int8 mode,int8 prescaler)" `101 
f N "set_rtcc" 1 127 ""
v L "value" 1 127 "int8" `105 
f B "set_rtcc" 1 127 "void(int8 value)" `104 
f N "get_rtcc" 1 128 ""
f B "get_rtcc" 1 128 "int8()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 130 "0"
d G "T0_EXT_L_TO_H" 1 131 "32"
d G "T0_EXT_H_TO_L" 1 132 "48"
d G "T0_DIV_1" 1 134 "8"
d G "T0_DIV_2" 1 135 "0"
d G "T0_DIV_4" 1 136 "1"
d G "T0_DIV_8" 1 137 "2"
d G "T0_DIV_16" 1 138 "3"
d G "T0_DIV_32" 1 139 "4"
d G "T0_DIV_64" 1 140 "5"
d G "T0_DIV_128" 1 141 "6"
d G "T0_DIV_256" 1 142 "7"
d G "T0_8_BIT" 1 145 "0"
d G "RTCC_INTERNAL" 1 147 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 148 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 149 "48"
d G "RTCC_DIV_1" 1 150 "8"
d G "RTCC_DIV_2" 1 151 "0"
d G "RTCC_DIV_4" 1 152 "1"
d G "RTCC_DIV_8" 1 153 "2"
d G "RTCC_DIV_16" 1 154 "3"
d G "RTCC_DIV_32" 1 155 "4"
d G "RTCC_DIV_64" 1 156 "5"
d G "RTCC_DIV_128" 1 157 "6"
d G "RTCC_DIV_256" 1 158 "7"
d G "RTCC_8_BIT" 1 159 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 170 ""
v L "mode" 1 170 "int16" `108 
f B "setup_wdt" 1 170 "void(int16 mode)" `107 
f N "restart_wdt" 1 171 ""
f B "restart_wdt" 1 171 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 174 "8"
d G "WDT_36MS" 1 175 "9"
d G "WDT_72MS" 1 176 "10"
d G "WDT_144MS" 1 177 "11"
d G "WDT_288MS" 1 178 "12"
d G "WDT_576MS" 1 179 "13"
d G "WDT_1152MS" 1 180 "14"
d G "WDT_2304MS" 1 181 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 187 ""
v L "mode" 1 187 "int16" `111 
f B "setup_timer_1" 1 187 "void(int16 mode)" `110 
f N "get_timer1" 1 188 ""
f B "get_timer1" 1 188 "int16()" `112 
f N "set_timer1" 1 189 ""
v L "value" 1 189 "int16" `114 
f B "set_timer1" 1 189 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 192 "0"
d G "T1_INTERNAL" 1 193 "0x85"
d G "T1_EXTERNAL" 1 194 "0x87"
d G "T1_EXTERNAL_SYNC" 1 195 "0x83"
d G "T1_CLK_OUT" 1 197 "8"
d G "T1_DIV_BY_1" 1 199 "0"
d G "T1_DIV_BY_2" 1 200 "0x10"
d G "T1_DIV_BY_4" 1 201 "0x20"
d G "T1_DIV_BY_8" 1 202 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 207 ""
v L "mode" 1 207 "int8" `116 
v L "period" 1 207 "int8" `117 
v L "postscale" 1 207 "int8" `118 
f B "setup_timer_2" 1 207 "void(int8 mode,int8 period,int8 postscale)" `115 
f N "get_timer2" 1 208 ""
f B "get_timer2" 1 208 "int8()" `119 
f N "set_timer2" 1 209 ""
v L "value" 1 209 "int8" `121 
f B "set_timer2" 1 209 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 211 "0"
d G "T2_DIV_BY_1" 1 212 "4"
d G "T2_DIV_BY_4" 1 213 "5"
d G "T2_DIV_BY_16" 1 214 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 220 ""
v L "mode" 1 220 "int32" `123 
f B "setup_ccp1" 1 220 "void(int32 mode)" `122 
f N "setup_ccp1" 1 221 ""
v L "mode" 1 221 "int32" `125 
v L "pwm" 1 221 "int8" `126 
f G "setup_ccp1" 1 221 "void(int32 mode,int8 pwm)" `124 
f N "set_pwm1_duty" 1 222 ""
v L "value" 1 222 "int16" `128 
f B "set_pwm1_duty" 1 222 "void(int16 value)" `127  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 224 "0"
d G "CCP_CAPTURE_FE" 1 225 "0x04"
d G "CCP_CAPTURE_RE" 1 226 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 227 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 228 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 229 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 230 "0x09"
d G "CCP_COMPARE_INT" 1 231 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 232 "0x0B"
d G "CCP_PWM" 1 233 "0x0C"
d G "CCP_PWM_PLUS_1" 1 234 "0x1c"
d G "CCP_PWM_PLUS_2" 1 235 "0x2c"
d G "CCP_PWM_PLUS_3" 1 236 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 243 ""
v L "mode" 1 243 "int32" `133 
f B "setup_ccp2" 1 243 "void(int32 mode)" `132 
f N "setup_ccp2" 1 244 ""
v L "mode" 1 244 "int32" `135 
v L "pwm" 1 244 "int8" `136 
f G "setup_ccp2" 1 244 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm2_duty" 1 245 ""
v L "value" 1 245 "int16" `138 
f B "set_pwm2_duty" 1 245 "void(int16 value)" `137 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 252 ""
v L "mode" 1 252 "int32" `143 
f B "setup_spi" 1 252 "void(int32 mode)" `142 
f N "spi_write" 1 253 ""
v L "value" 1 253 "int8" `145 
f B "spi_write" 1 253 "void(int8 value)" `144 
f N "spi_read" 1 254 ""
f B "spi_read" 1 254 "int8()" `146 
f N "spi_read" 1 255 ""
v L "value" 1 255 "int8" `148 
f G "spi_read" 1 255 "int8(int8 value)" `147 
f N "spi_data_in" 1 256 ""
f B "spi_data_in" 1 256 "int8()" `149  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 258 "0x00"
d G "SPI_MASTER" 1 259 "0x20"
d G "SPI_SLAVE" 1 260 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 261 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 262 "0x00"
d G "SPI_CLK_DIV_4" 1 263 "0x00"
d G "SPI_CLK_DIV_16" 1 264 "0x01"
d G "SPI_CLK_DIV_64" 1 265 "0x02"
d G "SPI_CLK_T2" 1 266 "0x03"
d G "SPI_SS_DISABLED" 1 267 "0x01"
d G "SPI_XMIT_L_TO_H" 1 269 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 270 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 272 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 273 "0x8000"
d G "SPI_L_TO_H" 1 276 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 277 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 281 ""
v L "baud" 1 281 "int32" `151 
f B "setup_uart" 1 281 "void(int32 baud)" `150 
f N "setup_uart" 1 282 ""
v L "baud" 1 282 "int32" `153 
v L "stream" 1 282 "int8" `154 
f G "setup_uart" 1 282 "void(int32 baud,int8 stream)" `152 
f N "setup_uart" 1 283 ""
v L "baud" 1 283 "int32" `156 
v L "stream" 1 283 "int8" `157 
v L "clock" 1 283 "int32" `158 
f G "setup_uart" 1 283 "void(int32 baud,int8 stream,int32 clock)" `155 
f N "set_uart_speed" 1 284 ""
v L "baud" 1 284 "int32" `160 
f B "set_uart_speed" 1 284 "void(int32 baud)" `159 
f N "set_uart_speed" 1 285 ""
v L "baud" 1 285 "int32" `162 
v L "stream" 1 285 "int8" `163 
f G "set_uart_speed" 1 285 "void(int32 baud,int8 stream)" `161 
f N "set_uart_speed" 1 286 ""
v L "baud" 1 286 "int32" `165 
v L "stream" 1 286 "int8" `166 
v L "clock" 1 286 "int32" `167 
f G "set_uart_speed" 1 286 "void(int32 baud,int8 stream,int32 clock)" `164  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 290 "2"
d G "UART_DATA" 1 291 "4"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 295 ""
v L "mode" 1 295 "int32" `169 
f B "setup_comparator" 1 295 "void(int32 mode)" `168  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 297 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 298 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 299 "0xbcf05"
d G "NC_NC_NC_NC" 1 300 "0x0ff07"
d G "A0_A3_A1_A2" 1 301 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 302 "0x9ef01"
d G "A0_VR_A1_VR" 1 303 "0x3ff06"
d G "A3_VR_A2_VR" 1 304 "0xcff0e"
d G "CP1_INVERT" 1 305 "0x0000010"
d G "CP2_INVERT" 1 306 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 313 ""
v L "mode" 1 313 "int8" `173 
f B "setup_vref" 1 313 "void(int8 mode)" `172  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 315 "0xa0"
d G "VREF_HIGH" 1 316 "0x80"
d G "VREF_A2" 1 318 "0x40"
c L "setup_vref" 1 3 4 "FUNCTION"
f N "setup_adc" 1 326 ""
v L "mode" 1 326 "int32" `175 
f B "setup_adc" 1 326 "void(int32 mode)" `174 
f N "read_adc" 1 327 ""
f B "read_adc" 1 327 "int8()" `176 
f N "read_adc" 1 328 ""
v L "mode" 1 328 "int8" `178 
f G "read_adc" 1 328 "int8(int8 mode)" `177 
f N "read_adc" 1 329 ""
f G "read_adc" 1 329 "int16()" `179 
f N "read_adc" 1 330 ""
v L "mode" 1 330 "int8" `181 
f G "read_adc" 1 330 "int16(int8 mode)" `180 
f N "adc_done" 1 331 ""
f B "adc_done" 1 331 "int8()" `182  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 333 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 334 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 335 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 336 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 337 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 338 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 339 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 340 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 343 ""
v L "setting" 1 343 "int8" `184 
f B "setup_adc_ports" 1 343 "void(int8 setting)" `183 
f N "set_analog_pins" 1 344 ""
v L "setting" 1 344 "int8" `186 
f B "set_analog_pins" 1 344 "void(int8 setting)" `185 
f N "set_adc_channel" 1 345 ""
v L "channel" 1 345 "int8" `188 
f B "set_adc_channel" 1 345 "void(int8 channel)" `187  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 347 "7" "None"
d G "ALL_ANALOG" 1 348 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 349 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 350 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 351 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 352 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 353 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 354 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 355 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 356 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 357 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 358 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 359 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 360 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 361 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 362 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 365 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 366 "1"
d G "ADC_READ_ONLY" 1 367 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 373 ""
v L "x" 1 373 "sint8" `190 
f B "abs" 1 373 "sint8(sint8 x)" `189 
f N "abs" 1 374 ""
v L "x" 1 374 "sint16" `192 
f G "abs" 1 374 "sint16(sint16 x)" `191 
f N "abs" 1 375 ""
v L "x" 1 375 "sint32" `194 
f G "abs" 1 375 "sint32(sint32 x)" `193 
f N "abs" 1 376 ""
v L "x" 1 376 "float" `196 
f G "abs" 1 376 "float(float x)" `195 
f N "_mul" 1 377 ""
v L "??65535" 1 377 "int8" `198 
v L "??65535" 1 377 "int8" `199 
f B "_mul" 1 377 "int16(int8 ,int8 )" `197 
f N "_mul" 1 378 ""
v L "??65535" 1 378 "sint8" `198 
v L "??65535" 1 378 "sint8" `202 
f G "_mul" 1 378 "sint16(sint8 ,sint8 )" `200 
f N "_mul" 1 379 ""
v L "??65535" 1 379 "int16" `198 
v L "??65535" 1 379 "int16" `205 
f G "_mul" 1 379 "int32(int16 ,int16 )" `203 
f N "_mul" 1 380 ""
v L "??65535" 1 380 "sint16" `198 
v L "??65535" 1 380 "sint16" `208 
f G "_mul" 1 380 "sint32(sint16 ,sint16 )" `206  "Memory Manipulation Prototypes:"
f N "read_bank" 1 383 ""
v L "bank" 1 383 "int8" `210 
v L "offset" 1 383 "int8" `211 
f B "read_bank" 1 383 "int8(int8 bank,int8 offset)" `209 
f N "write_bank" 1 384 ""
v L "bank" 1 384 "int8" `213 
v L "offset" 1 384 "int8" `214 
v L "value" 1 384 "int8" `215 
f B "write_bank" 1 384 "void(int8 bank,int8 offset,int8 value)" `212 
f N "strcpy" 1 385 ""
v L "dest" 1 385 "*int8" `217 
v L "src" 1 385 "*int8" `218 
f B "strcpy" 1 385 "void(*int8 dest,*int8 src)" `216 
f N "memset" 1 386 ""
v L "destination" 1 386 "*int8" `220 
v L "value" 1 386 "int8" `221 
v L "num" 1 386 "int16" `222 
f B "memset" 1 386 "void(*int8 destination,int8 value,int16 num)" `219 
f N "memcpy" 1 387 ""
v L "destination" 1 387 "*int8" `224 
v L "source" 1 387 "*int8" `225 
v L "num" 1 387 "int16" `226 
f B "memcpy" 1 387 "void(*int8 destination,*int8 source,int16 num)" `223  "String Prototypes:"
f N "toupper" 1 390 ""
v L "cvalue" 1 390 "int8" `228 
f B "toupper" 1 390 "int8(int8 cvalue)" `227 
f N "tolower" 1 391 ""
v L "cvalue" 1 391 "int8" `230 
f B "tolower" 1 391 "int8(int8 cvalue)" `229 
f N "sprintf" 1 392 ""
v L "string" 1 392 "*int8" `232 
v L "cstring" 1 392 "*int8" `233 
f B "sprintf" 1 392 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `231  "Data Manipulators Prototypes:"
f N "shift_left" 1 395 ""
v L "address" 1 395 "*int8" `236 
v L "bytes" 1 395 "int8" `237 
v L "value" 1 395 "int8" `238 
f B "shift_left" 1 395 "int8(*int8 address,int8 bytes,int8 value)" `235 
f N "shift_right" 1 396 ""
v L "address" 1 396 "*int8" `240 
v L "bytes" 1 396 "int8" `241 
v L "value" 1 396 "int8" `242 
f B "shift_right" 1 396 "int8(*int8 address,int8 bytes,int8 value)" `239 
f N "rotate_left" 1 397 ""
v L "address" 1 397 "*int8" `244 
v L "bytes" 1 397 "int8" `245 
f B "rotate_left" 1 397 "void(*int8 address,int8 bytes)" `243 
f N "rotate_right" 1 398 ""
v L "address" 1 398 "*int8" `247 
v L "bytes" 1 398 "int8" `248 
f B "rotate_right" 1 398 "void(*int8 address,int8 bytes)" `246 
f N "swap" 1 399 ""
v L "value" 1 399 "int8" `250 
f B "swap" 1 399 "void(int8 value)" `249 
f N "make8" 1 400 ""
v L "var" 1 400 "int16" `252 
v L "offset" 1 400 "int8" `253 
f B "make8" 1 400 "int8(int16 var,int8 offset)" `251 
f N "make8" 1 401 ""
v L "var" 1 401 "int32" `252 
v L "offset" 1 401 "int8" `256 
f G "make8" 1 401 "int8(int32 var,int8 offset)" `254 
f N "make16" 1 402 ""
v L "varhigh" 1 402 "int8" `258 
v L "varlow" 1 402 "int8" `259 
f B "make16" 1 402 "int16(int8 varhigh,int8 varlow)" `257 
f N "make32" 1 403 ""
v L "var1" 1 403 "int16" `261 
f B "make32" 1 403 "int32(int16 var1)" `260 
f N "make32" 1 404 ""
v L "var1" 1 404 "int16" `263 
v L "var2" 1 404 "int16" `264 
f G "make32" 1 404 "int32(int16 var1,int16 var2)" `262 
f N "make32" 1 405 ""
v L "var1" 1 405 "int16" `263 
v L "var2" 1 405 "int8" `267 
f G "make32" 1 405 "int32(int16 var1,int8 var2)" `265 
f N "make32" 1 406 ""
v L "var1" 1 406 "int16" `269 
v L "var2" 1 406 "int8" `270 
v L "var3" 1 406 "int8" `271 
f G "make32" 1 406 "int32(int16 var1,int8 var2,int8 var3)" `268 
f N "make32" 1 407 ""
v L "var1" 1 407 "int8" `273 
f G "make32" 1 407 "int32(int8 var1)" `272 
f N "make32" 1 408 ""
v L "var1" 1 408 "int8" `263 
v L "var2" 1 408 "int8" `276 
f G "make32" 1 408 "int32(int8 var1,int8 var2)" `274 
f N "make32" 1 409 ""
v L "var1" 1 409 "int8" `269 
v L "var2" 1 409 "int8" `270 
v L "var3" 1 409 "int8" `280 
f G "make32" 1 409 "int32(int8 var1,int8 var2,int8 var3)" `277 
f N "make32" 1 410 ""
v L "var1" 1 410 "int8" `282 
v L "var2" 1 410 "int8" `283 
v L "var3" 1 410 "int8" `284 
v L "var4" 1 410 "int8" `285 
f G "make32" 1 410 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `281 
f N "make32" 1 411 ""
v L "var1" 1 411 "int8" `263 
v L "var2" 1 411 "int16" `288 
f G "make32" 1 411 "int32(int8 var1,int16 var2)" `286 
f N "make32" 1 412 ""
v L "var1" 1 412 "int8" `269 
v L "var2" 1 412 "int16" `270 
v L "var3" 1 412 "int8" `292 
f G "make32" 1 412 "int32(int8 var1,int16 var2,int8 var3)" `289 
f N "make32" 1 413 ""
v L "var1" 1 413 "int8" `269 
v L "var2" 1 413 "int8" `270 
v L "var3" 1 413 "int16" `296 
f G "make32" 1 413 "int32(int8 var1,int8 var2,int16 var3)" `293 
f N "bit_set" 1 414 ""
v L "var" 1 414 "int8" `298 
v L "bit" 1 414 "int8" `299 
f B "bit_set" 1 414 "void(int8 var,int8 bit)" `297 
f N "bit_set" 1 415 ""
v L "var" 1 415 "int16" `298 
v L "bit" 1 415 "int8" `302 
f G "bit_set" 1 415 "void(int16 var,int8 bit)" `300 
f N "bit_set" 1 416 ""
v L "var" 1 416 "int32" `298 
v L "bit" 1 416 "int8" `305 
f G "bit_set" 1 416 "void(int32 var,int8 bit)" `303 
f N "bit_clear" 1 417 ""
v L "var" 1 417 "int8" `307 
v L "bit" 1 417 "int8" `308 
f B "bit_clear" 1 417 "void(int8 var,int8 bit)" `306 
f N "bit_clear" 1 418 ""
v L "var" 1 418 "int16" `307 
v L "bit" 1 418 "int8" `311 
f G "bit_clear" 1 418 "void(int16 var,int8 bit)" `309 
f N "bit_clear" 1 419 ""
v L "var" 1 419 "int32" `307 
v L "bit" 1 419 "int8" `314 
f G "bit_clear" 1 419 "void(int32 var,int8 bit)" `312 
f N "bit_test" 1 420 ""
v L "var" 1 420 "int8" `316 
v L "bit" 1 420 "int8" `317 
f B "bit_test" 1 420 "int8(int8 var,int8 bit)" `315 
f N "bit_test" 1 421 ""
v L "var" 1 421 "int16" `316 
v L "bit" 1 421 "int8" `320 
f G "bit_test" 1 421 "int8(int16 var,int8 bit)" `318 
f N "bit_test" 1 422 ""
v L "var" 1 422 "int32" `316 
v L "bit" 1 422 "int8" `323 
f G "bit_test" 1 422 "int8(int32 var,int8 bit)" `321  "#use delay() Prototypes:"
f N "delay_cycles" 1 425 ""
v L "count" 1 425 "int8" `325 
f B "delay_cycles" 1 425 "void(int8 count)" `324 
f N "delay_ms" 1 426 ""
v L "time" 1 426 "int16" `327 
f B "delay_ms" 1 426 "void(int16 time)" `326 
f N "delay_us" 1 427 ""
v L "time" 1 427 "int16" `329 
f B "delay_us" 1 427 "void(int16 time)" `328  "#use rs232() Prototypes:"
f N "putchar" 1 430 ""
v L "cdata" 1 430 "int8" `331 
f B "putchar" 1 430 "void(int8 cdata)" `330 
f N "putchar" 1 431 ""
v L "cdata" 1 431 "int8" `333 
v L "stream" 1 431 "int8" `334 
f G "putchar" 1 431 "void(int8 cdata,int8 stream)" `332 
f N "puts" 1 432 ""
v L "string" 1 432 "*int8" `336 
f B "puts" 1 432 "void(*int8 string)" `335 
f N "puts" 1 433 ""
v L "string" 1 433 "*int8" `338 
v L "stream" 1 433 "int8" `339 
f G "puts" 1 433 "void(*int8 string,int8 stream)" `337 
f N "getch" 1 434 ""
f B "getch" 1 434 "int8()" `340 
f N "getch" 1 435 ""
v L "stream" 1 435 "int8" `342 
f G "getch" 1 435 "int8(int8 stream)" `341 
f N "gets" 1 436 ""
v L "string" 1 436 "*int8" `344 
f B "gets" 1 436 "void(*int8 string)" `343 
f N "gets" 1 437 ""
v L "string" 1 437 "*int8" `346 
v L "stream" 1 437 "int8" `347 
f G "gets" 1 437 "void(*int8 string,int8 stream)" `345 
f N "kbhit" 1 438 ""
f B "kbhit" 1 438 "int8()" `348 
f N "kbhit" 1 439 ""
v L "stream" 1 439 "int8" `350 
f G "kbhit" 1 439 "int8(int8 stream)" `349 
f N "printf" 1 440 ""
v L "string" 1 440 "*int8" `352 
f B "printf" 1 440 "void(*int8 string,*int8 _VA_LIST)" `351 
f N "fprintf" 1 441 ""
v L "stream" 1 441 "int8" `355 
v L "string" 1 441 "*int8" `356 
f B "fprintf" 1 441 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `354 
f N "putc_send" 1 442 ""
f B "putc_send" 1 442 "void()" `358 
f N "fputc_send" 1 443 ""
v L "stream" 1 443 "int8" `360 
f B "fputc_send" 1 443 "void(int8 stream)" `359 
f N "rcv_buffer_full" 1 444 ""
f B "rcv_buffer_full" 1 444 "int8()" `361 
f N "rcv_buffer_full" 1 445 ""
v L "stream" 1 445 "int8" `363 
f G "rcv_buffer_full" 1 445 "int8(int8 stream)" `362 
f N "rcv_buffer_bytes" 1 446 ""
f B "rcv_buffer_bytes" 1 446 "int16()" `364 
f N "rcv_buffer_bytes" 1 447 ""
v L "stream" 1 447 "int8" `366 
f G "rcv_buffer_bytes" 1 447 "int16(int8 stream)" `365 
f N "tx_buffer_full" 1 448 ""
f B "tx_buffer_full" 1 448 "int8()" `367 
f N "tx_buffer_full" 1 449 ""
v L "stream" 1 449 "int8" `369 
f G "tx_buffer_full" 1 449 "int8(int8 stream)" `368 
f N "tx_buffer_bytes" 1 450 ""
f B "tx_buffer_bytes" 1 450 "int16()" `370 
f N "tx_buffer_bytes" 1 451 ""
v L "stream" 1 451 "int8" `372 
f G "tx_buffer_bytes" 1 451 "int16(int8 stream)" `371  "#use i2c() Prototypes:"
f N "i2c_read" 1 454 ""
f B "i2c_read" 1 454 "int8()" `373 
f N "i2c_read" 1 455 ""
v L "stream" 1 455 "int8" `375 
f G "i2c_read" 1 455 "int8(int8 stream)" `374 
f N "i2c_read" 1 456 ""
v L "stream" 1 456 "int8" `377 
v L "ack" 1 456 "int8" `378 
f G "i2c_read" 1 456 "int8(int8 stream,int8 ack)" `376 
f N "i2c_write" 1 457 ""
v L "data" 1 457 "int8" `380 
f B "i2c_write" 1 457 "int8(int8 data)" `379 
f N "i2c_write" 1 458 ""
v L "stream" 1 458 "int8" `382 
v L "data" 1 458 "int8" `383 
f G "i2c_write" 1 458 "int8(int8 stream,int8 data)" `381 
f N "i2c_start" 1 459 ""
f B "i2c_start" 1 459 "void()" `384 
f N "i2c_start" 1 460 ""
v L "stream" 1 460 "int8" `386 
f G "i2c_start" 1 460 "void(int8 stream)" `385 
f N "i2c_start" 1 461 ""
v L "stream" 1 461 "int8" `388 
v L "restart" 1 461 "int8" `389 
f G "i2c_start" 1 461 "void(int8 stream,int8 restart)" `387 
f N "i2c_stop" 1 462 ""
f B "i2c_stop" 1 462 "void()" `390 
f N "i2c_stop" 1 463 ""
v L "stream" 1 463 "int8" `392 
f G "i2c_stop" 1 463 "void(int8 stream)" `391 
f N "i2c_isr_state" 1 464 ""
f B "i2c_isr_state" 1 464 "int8()" `393 
f N "i2c_slaveaddr" 1 465 ""
v L "addr" 1 465 "int8" `395 
f B "i2c_slaveaddr" 1 465 "void(int8 addr)" `394 
f N "i2c_slaveaddr" 1 466 ""
v L "stream" 1 466 "int8" `397 
v L "addr" 1 466 "int8" `398 
f G "i2c_slaveaddr" 1 466 "void(int8 stream,int8 addr)" `396 
f N "i2c_poll" 1 467 ""
f B "i2c_poll" 1 467 "int8()" `399 
f N "i2c_poll" 1 468 ""
v L "stream" 1 468 "int8" `401 
f G "i2c_poll" 1 468 "int8(int8 stream)" `400 
f N "i2c_init" 1 469 ""
v L "baud" 1 469 "int32" `403 
f B "i2c_init" 1 469 "void(int32 baud)" `402 
f N "i2c_init" 1 470 ""
v L "stream" 1 470 "int8" `405 
v L "baud" 1 470 "int32" `406 
f G "i2c_init" 1 470 "void(int8 stream,int32 baud)" `404  "#use spi() Prototypes:"
f N "spi_xfer" 1 473 ""
f B "spi_xfer" 1 473 "int8()" `407 
f N "spi_xfer" 1 474 ""
f G "spi_xfer" 1 474 "int16()" `408 
f N "spi_xfer" 1 475 ""
f G "spi_xfer" 1 475 "int32()" `409 
f N "spi_xfer" 1 476 ""
v L "data" 1 476 "int8" `411 
f G "spi_xfer" 1 476 "int8(int8 data)" `410 
f N "spi_xfer" 1 477 ""
v L "data" 1 477 "int16" `413 
f G "spi_xfer" 1 477 "int16(int16 data)" `412 
f N "spi_xfer" 1 478 ""
v L "data" 1 478 "int32" `415 
f G "spi_xfer" 1 478 "int32(int32 data)" `414 
f N "spi_xfer" 1 479 ""
v L "stream" 1 479 "int8" `417 
v L "data" 1 479 "int8" `418 
f G "spi_xfer" 1 479 "int8(int8 stream,int8 data)" `416 
f N "spi_xfer" 1 480 ""
v L "stream" 1 480 "int8" `417 
v L "data" 1 480 "int16" `421 
f G "spi_xfer" 1 480 "int16(int8 stream,int16 data)" `419 
f N "spi_xfer" 1 481 ""
v L "stream" 1 481 "int8" `417 
v L "data" 1 481 "int32" `424 
f G "spi_xfer" 1 481 "int32(int8 stream,int32 data)" `422 
f N "spi_xfer" 1 482 ""
v L "stream" 1 482 "int8" `426 
v L "data" 1 482 "int8" `427 
v L "bits" 1 482 "int8" `428 
f G "spi_xfer" 1 482 "int8(int8 stream,int8 data,int8 bits)" `425 
f N "spi_xfer" 1 483 ""
v L "stream" 1 483 "int8" `426 
v L "data" 1 483 "int16" `427 
v L "bits" 1 483 "int8" `432 
f G "spi_xfer" 1 483 "int16(int8 stream,int16 data,int8 bits)" `429 
f N "spi_xfer" 1 484 ""
v L "stream" 1 484 "int8" `426 
v L "data" 1 484 "int32" `427 
v L "bits" 1 484 "int8" `436 
f G "spi_xfer" 1 484 "int32(int8 stream,int32 data,int8 bits)" `433 
f N "spi_init" 1 485 ""
v L "baud" 1 485 "int32" `438 
f B "spi_init" 1 485 "void(int32 baud)" `437 
f N "spi_init" 1 486 ""
v L "stream" 1 486 "int8" `440 
v L "baud" 1 486 "int32" `441 
f G "spi_init" 1 486 "void(int8 stream,int32 baud)" `439 
f N "spi_speed" 1 487 ""
v L "baud" 1 487 "int32" `443 
f B "spi_speed" 1 487 "void(int32 baud)" `442 
f N "spi_speed" 1 488 ""
v L "stream" 1 488 "int8" `445 
v L "baud" 1 488 "int32" `446 
f G "spi_speed" 1 488 "void(int8 stream,int32 baud)" `444 
f N "spi_speed" 1 489 ""
v L "stream" 1 489 "int8" `448 
v L "baud" 1 489 "int32" `449 
v L "clock" 1 489 "int32" `450 
f G "spi_speed" 1 489 "void(int8 stream,int32 baud,int32 clock)" `447 
f N "spi_prewrite" 1 490 ""
v L "data" 1 490 "int8" `452 
f B "spi_prewrite" 1 490 "void(int8 data)" `451 
f N "spi_prewrite" 1 491 ""
v L "data" 1 491 "int16" `454 
f G "spi_prewrite" 1 491 "void(int16 data)" `453 
f N "spi_prewrite" 1 492 ""
v L "data" 1 492 "int32" `456 
f G "spi_prewrite" 1 492 "void(int32 data)" `455 
f N "spi_prewrite" 1 493 ""
v L "??65535" 1 493 "int8" `458 
v L "data" 1 493 "int8" `459 
f G "spi_prewrite" 1 493 "void(int8 ,int8 data)" `457 
f N "spi_prewrite" 1 494 ""
v L "??65535" 1 494 "int8" `458 
v L "data" 1 494 "int16" `462 
f G "spi_prewrite" 1 494 "void(int8 ,int16 data)" `460 
f N "spi_prewrite" 1 495 ""
v L "??65535" 1 495 "int8" `458 
v L "data" 1 495 "int32" `465 
f G "spi_prewrite" 1 495 "void(int8 ,int32 data)" `463 
f N "spi_xfer_in" 1 496 ""
f B "spi_xfer_in" 1 496 "int8()" `466 
f N "spi_xfer_in" 1 497 ""
f G "spi_xfer_in" 1 497 "int16()" `467 
f N "spi_xfer_in" 1 498 ""
f G "spi_xfer_in" 1 498 "int32()" `468 
f N "spi_xfer_in" 1 499 ""
v L "bits" 1 499 "int8" `470 
f G "spi_xfer_in" 1 499 "int8(int8 bits)" `469 
f N "spi_xfer_in" 1 500 ""
v L "bits" 1 500 "int8" `472 
f G "spi_xfer_in" 1 500 "int16(int8 bits)" `471 
f N "spi_xfer_in" 1 501 ""
v L "bits" 1 501 "int8" `474 
f G "spi_xfer_in" 1 501 "int32(int8 bits)" `473 
f N "spi_xfer_in" 1 502 ""
v L "stream" 1 502 "int8" `476 
v L "bits" 1 502 "int8" `477 
f G "spi_xfer_in" 1 502 "int8(int8 stream,int8 bits)" `475 
f N "spi_xfer_in" 1 503 ""
v L "stream" 1 503 "int8" `476 
v L "bits" 1 503 "int8" `480 
f G "spi_xfer_in" 1 503 "int16(int8 stream,int8 bits)" `478 
f N "spi_xfer_in" 1 504 ""
v L "stream" 1 504 "int8" `476 
v L "bits" 1 504 "int8" `483 
f G "spi_xfer_in" 1 504 "int32(int8 stream,int8 bits)" `481  "#use rtos() Prototypes:"
f N "rtos_run" 1 507 ""
f B "rtos_run" 1 507 "void()" `484 
f N "rtos_yield" 1 508 ""
f B "rtos_yield" 1 508 "void()" `485 
f N "rtos_enable" 1 509 ""
v L "task" 1 509 "int8" `487 
f B "rtos_enable" 1 509 "void(int8 task)" `486 
f N "rtos_disable" 1 510 ""
v L "task" 1 510 "int8" `489 
f B "rtos_disable" 1 510 "void(int8 task)" `488 
f N "rtos_terminate" 1 511 ""
f B "rtos_terminate" 1 511 "void()" `490 
f N "rtos_await" 1 512 ""
v L "flag" 1 512 "int8" `492 
f B "rtos_await" 1 512 "void(int8 flag)" `491 
f N "rtos_wait" 1 513 ""
v L "sem" 1 513 "int8" `494 
f B "rtos_wait" 1 513 "void(int8 sem)" `493 
f N "rtos_signal" 1 514 ""
v L "sem" 1 514 "int8" `496 
f B "rtos_signal" 1 514 "void(int8 sem)" `495 
f N "rtos_msg_send" 1 515 ""
v L "task" 1 515 "int8" `498 
v L "msg" 1 515 "int8" `499 
f B "rtos_msg_send" 1 515 "void(int8 task,int8 msg)" `497 
f N "rtos_msg_read" 1 516 ""
f B "rtos_msg_read" 1 516 "int8()" `500 
f N "rtos_msg_poll" 1 517 ""
f B "rtos_msg_poll" 1 517 "int8()" `501 
f N "rtos_overrun" 1 518 ""
v L "task" 1 518 "int8" `503 
f B "rtos_overrun" 1 518 "int8(int8 task)" `502 
f N "rtos_stats" 1 519 ""
v L "task" 1 519 "int8" `505 
v L "stat" 1 519 "*int8" `506 
f B "rtos_stats" 1 519 "void(int8 task,*int8 stat)" `504  "#use timer() Prototypes:"
f N "get_ticks" 1 522 ""
f B "get_ticks" 1 522 "int8()" `507 
f N "get_ticks" 1 523 ""
f G "get_ticks" 1 523 "int16()" `508 
f N "get_ticks" 1 524 ""
f G "get_ticks" 1 524 "int32()" `509 
f N "get_ticks" 1 525 ""
v L "stream" 1 525 "int8" `511 
f G "get_ticks" 1 525 "int8(int8 stream)" `510 
f N "get_ticks" 1 526 ""
v L "stream" 1 526 "int8" `513 
f G "get_ticks" 1 526 "int16(int8 stream)" `512 
f N "get_ticks" 1 527 ""
v L "stream" 1 527 "int8" `515 
f G "get_ticks" 1 527 "int32(int8 stream)" `514 
f N "set_ticks" 1 528 ""
v L "value" 1 528 "int8" `517 
f B "set_ticks" 1 528 "void(int8 value)" `516 
f N "set_ticks" 1 529 ""
v L "value" 1 529 "int16" `519 
f G "set_ticks" 1 529 "void(int16 value)" `518 
f N "set_ticks" 1 530 ""
v L "value" 1 530 "int32" `521 
f G "set_ticks" 1 530 "void(int32 value)" `520 
f N "set_ticks" 1 531 ""
v L "stream" 1 531 "int8" `523 
v L "value" 1 531 "int8" `524 
f G "set_ticks" 1 531 "void(int8 stream,int8 value)" `522 
f N "set_ticks" 1 532 ""
v L "stream" 1 532 "int8" `523 
v L "value" 1 532 "int16" `527 
f G "set_ticks" 1 532 "void(int8 stream,int16 value)" `525 
f N "set_ticks" 1 533 ""
v L "stream" 1 533 "int8" `523 
v L "value" 1 533 "int32" `530 
f G "set_ticks" 1 533 "void(int8 stream,int32 value)" `528  "#use pwm() Prototypes:"
f N "pwm_on" 1 536 ""
f B "pwm_on" 1 536 "void()" `531 
f N "pwm_on" 1 537 ""
v L "stream" 1 537 "int8" `533 
f G "pwm_on" 1 537 "void(int8 stream)" `532 
f N "pwm_off" 1 538 ""
f B "pwm_off" 1 538 "void()" `534 
f N "pwm_off" 1 539 ""
v L "stream" 1 539 "int8" `536 
f G "pwm_off" 1 539 "void(int8 stream)" `535 
f N "pwm_set_duty" 1 540 ""
v L "duty" 1 540 "int16" `538 
f B "pwm_set_duty" 1 540 "void(int16 duty)" `537 
f N "pwm_set_duty" 1 541 ""
v L "stream" 1 541 "int8" `540 
v L "duty" 1 541 "int16" `541 
f G "pwm_set_duty" 1 541 "void(int8 stream,int16 duty)" `539 
f N "pwm_set_duty_percent" 1 542 ""
v L "percent" 1 542 "int16" `543 
f B "pwm_set_duty_percent" 1 542 "void(int16 percent)" `542 
f N "pwm_set_duty_percent" 1 543 ""
v L "stream" 1 543 "int8" `545 
v L "percent" 1 543 "int16" `546 
f G "pwm_set_duty_percent" 1 543 "void(int8 stream,int16 percent)" `544 
f N "pwm_set_frequency" 1 544 ""
v L "frequency" 1 544 "int32" `548 
f B "pwm_set_frequency" 1 544 "void(int32 frequency)" `547 
f N "pwm_set_frequency" 1 545 ""
v L "stream" 1 545 "int8" `550 
v L "frequency" 1 545 "int32" `551 
f G "pwm_set_frequency" 1 545 "void(int8 stream,int32 frequency)" `549  "#use capture() Prototypes:"
f N "get_capture_time" 1 548 ""
f B "get_capture_time" 1 548 "int16()" `552 
f N "get_capture_time" 1 549 ""
v L "stream" 1 549 "int8" `554 
f G "get_capture_time" 1 549 "int16(int8 stream)" `553 
f N "get_capture_event" 1 550 ""
f B "get_capture_event" 1 550 "int8()" `555 
f N "get_capture_event" 1 551 ""
v L "stream" 1 551 "int8" `557 
f G "get_capture_event" 1 551 "int8(int8 stream)" `556  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 564 ""
v L "address" 1 564 "int16" `559 
f B "goto_address" 1 564 "void(int16 address)" `558 
f N "label_address" 1 565 ""
v L "label" 1 565 "int16" `561 
f B "label_address" 1 565 "int16(int16 label)" `560  "Program Memory Prototypes:"
f N "read_program_memory" 1 568 ""
v L "address" 1 568 "int16" `563 
v L "dataptr" 1 568 "*int8" `564 
v L "count" 1 568 "int16" `565 
f B "read_program_memory" 1 568 "void(int16 address,*int8 dataptr,int16 count)" `562 
f N "read_program_eeprom" 1 569 ""
v L "address" 1 569 "int16" `567 
f B "read_program_eeprom" 1 569 "int16(int16 address)" `566 
f N "write_program_memory" 1 570 ""
v L "address" 1 570 "int16" `569 
v L "dataptr" 1 570 "*int8" `570 
v L "count" 1 570 "int16" `571 
f B "write_program_memory" 1 570 "void(int16 address,*int8 dataptr,int16 count)" `568 
f N "write_program_eeprom" 1 571 ""
v L "address" 1 571 "int16" `573 
v L "data" 1 571 "int16" `574 
f B "write_program_eeprom" 1 571 "void(int16 address,int16 data)" `572  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 576 "int16" `575 
f N "read_eeprom" 1 581 ""
v L "address" 1 581 "__EEADDRESS__" `577 
f B "read_eeprom" 1 581 "int8(__EEADDRESS__ address)" `576 
f N "write_eeprom" 1 582 ""
v L "address" 1 582 "__EEADDRESS__" `579 
v L "value" 1 582 "int8" `580 
f B "write_eeprom" 1 582 "void(__EEADDRESS__ address,int8 value)" `578  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 589 ""
v L "interrupt" 1 589 "int32" `582 
f B "enable_interrupts" 1 589 "void(int32 interrupt)" `581 
f N "disable_interrupts" 1 590 ""
v L "interrupt" 1 590 "int32" `584 
f B "disable_interrupts" 1 590 "void(int32 interrupt)" `583 
f N "clear_interrupt" 1 591 ""
v L "interrupt" 1 591 "int32" `586 
f B "clear_interrupt" 1 591 "void(int32 interrupt)" `585 
f N "interrupt_active" 1 592 ""
v L "interrupt" 1 592 "int32" `588 
f B "interrupt_active" 1 592 "int8(int32 interrupt)" `587 
f N "interrupt_enabled" 1 593 ""
v L "interrupt" 1 593 "int32" `590 
f B "interrupt_enabled" 1 593 "int8(int32 interrupt)" `589 
f N "ext_int_edge" 1 594 ""
v L "source" 1 594 "int8" `592 
v L "edge" 1 594 "int8" `593 
f B "ext_int_edge" 1 594 "void(int8 source,int8 edge)" `591 
f N "jump_to_isr" 1 595 ""
v L "address" 1 595 "int16" `595 
f B "jump_to_isr" 1 595 "void(int16 address)" `594  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 597 "0x40"
d G "H_TO_L" 1 598 "0"
d G "GLOBAL" 1 600 "0x0BC0"
d G "PERIPH" 1 601 "0x0B40"
d G "INT_RTCC" 1 602 "0x000B20"
d G "INT_RB" 1 603 "0x00FF0B08"
d G "INT_EXT_L2H" 1 604 "0x50000B10"
d G "INT_EXT_H2L" 1 605 "0x60000B10"
d G "INT_EXT" 1 606 "0x000B10"
d G "INT_AD" 1 607 "0x008C40"
d G "INT_TBE" 1 608 "0x008C10"
d G "INT_RDA" 1 609 "0x008C20"
d G "INT_TIMER1" 1 610 "0x008C01"
d G "INT_TIMER2" 1 611 "0x008C02"
d G "INT_CCP1" 1 612 "0x008C04"
d G "INT_CCP2" 1 613 "0x008D01"
d G "INT_SSP" 1 614 "0x008C08"
d G "INT_BUSCOL" 1 615 "0x008D08"
d G "INT_EEPROM" 1 616 "0x008D10"
d G "INT_TIMER0" 1 617 "0x000B20"
d G "INT_COMP" 1 618 "0x008D40"
D G "COIN" 0 7 "PIN_A1"
D G "SERVO" 0 8 "PIN_A2"
D G "LEDSERVO" 0 9 "PIN_A4"
D G "LCD_RS_PIN" 0 10 "PIN_B0"
D G "LCD_RW_PIN" 0 11 "PIN_B1"
D G "LCD_ENABLE_PIN" 0 12 "PIN_B2"
D G "LCD_DATA4" 0 13 "PIN_B4"
D G "LCD_DATA5" 0 14 "PIN_B5"
D G "LCD_DATA6" 0 15 "PIN_B6"
D G "LCD_DATA7" 0 16 "PIN_B7"
D G "CSID" 0 17 "PIN_C0"
D G "MFRC522_CS" 0 18 "PIN_C1"
D G "MFRC522_RST" 0 19 "PIN_C2"
D G "MFRC522_SCK" 0 20 "PIN_C3"
D G "MFRC522_SI" 0 21 "PIN_C4"
D G "MFRC522_SO" 0 22 "PIN_C5"
D G "TX" 0 23 "PIN_C6"
D G "RX" 0 24 "PIN_C7"
D G "PCD_IDLE" 2 1 "0x00"
D G "PCD_AUTHENT" 2 2 "0x0E"
D G "PCD_RECEIVE" 2 3 "0x08"
D G "PCD_TRANSMIT" 2 4 "0x04"
D G "PCD_TRANSCEIVE" 2 5 "0x0C"
D G "PCD_RESETPHASE" 2 6 "0x0F"
D G "PCD_CALCCRC" 2 7 "0x03"
D G "PICC_REQIDL" 2 8 "0x26"
D G "PICC_REQALL" 2 9 "0x52"
D G "PICC_ANTICOLL" 2 10 "0x93"
D G "PICC_SElECTTAG" 2 11 "0x93"
D G "PICC_AUTHENT1A" 2 12 "0x60"
D G "PICC_AUTHENT1B" 2 13 "0x61"
D G "PICC_READ" 2 14 "0x30"
D G "PICC_WRITE" 2 15 "0xA0"
D G "PICC_DECREMENT" 2 16 "0xC0"
D G "PICC_INCREMENT" 2 17 "0xC1"
D G "PICC_RESTORE" 2 18 "0xC2"
D G "PICC_TRANSFER" 2 19 "0xB0"
D G "PICC_HALT" 2 20 "0x50"
D G "MI_OK" 2 21 "0"
D G "MI_NOTAGERR" 2 22 "1"
D G "MI_ERR" 2 23 "2"
D G "RESERVED00" 2 24 "0x00"
D G "COMMANDREG" 2 25 "0x01"
D G "COMMIENREG" 2 26 "0x02"
D G "DIVLENREG" 2 27 "0x03"
D G "COMMIRQREG" 2 28 "0x04"
D G "DIVIRQREG" 2 29 "0x05"
D G "ERRORREG" 2 30 "0x06"
D G "STATUS1REG" 2 31 "0x07"
D G "STATUS2REG" 2 32 "0x08"
D G "FIFODATAREG" 2 33 "0x09"
D G "FIFOLEVELREG" 2 34 "0x0A"
D G "WATERLEVELREG" 2 35 "0x0B"
D G "CONTROLREG" 2 36 "0x0C"
D G "BITFRAMINGREG" 2 37 "0x0D"
D G "COLLREG" 2 38 "0x0E"
D G "RESERVED01" 2 39 "0x0F"
D G "RESERVED10" 2 40 "0x10"
D G "MODEREG" 2 41 "0x11"
D G "TXMODEREG" 2 42 "0x12"
D G "RXMODEREG" 2 43 "0x13"
D G "TXCONTROLREG" 2 44 "0x14"
D G "TXAUTOREG" 2 45 "0x15"
D G "TXSELREG" 2 46 "0x16"
D G "RXSELREG" 2 47 "0x17"
D G "RXTHRESHOLDREG" 2 48 "0x18"
D G "DEMODREG" 2 49 "0x19"
D G "RESERVED11" 2 50 "0x1A"
D G "RESERVED12" 2 51 "0x1B"
D G "MIFAREREG" 2 52 "0x1C"
D G "RESERVED13" 2 53 "0x1D"
D G "RESERVED14" 2 54 "0x1E"
D G "SERIALSPEEDREG" 2 55 "0x1F"
D G "RESERVED20" 2 56 "0x20"
D G "CRCRESULTREGM" 2 57 "0x21"
D G "CRCRESULTREGL" 2 58 "0x22"
D G "RESERVED21" 2 59 "0x23"
D G "MODWIDTHREG" 2 60 "0x24"
D G "RESERVED22" 2 61 "0x25"
D G "RFCFGREG" 2 62 "0x26"
D G "GSNREG" 2 63 "0x27"
D G "CWGSPREG" 2 64 "0x28"
D G "MODGSPREG" 2 65 "0x29"
D G "TMODEREG" 2 66 "0x2A"
D G "TPRESCALERREG" 2 67 "0x2B"
D G "TRELOADREGH" 2 68 "0x2C"
D G "TRELOADREGL" 2 69 "0x2D"
D G "TCOUNTERVALUEREGH" 2 70 "0x2E"
D G "TCOUNTERVALUEREGL" 2 71 "0x2F"
D G "RESERVED30" 2 72 "0x30"
D G "TESTSEL1REG" 2 73 "0x31"
D G "TESTSEL2REG" 2 74 "0x32"
D G "TESTPINENREG" 2 75 "0x33"
D G "TESTPINVALUEREG" 2 76 "0x34"
D G "TESTBUSREG" 2 77 "0x35"
D G "AUTOTESTREG" 2 78 "0x36"
D G "VERSIONREG" 2 79 "0x37"
D G "ANALOGTESTREG" 2 80 "0x38"
D G "TESTDAC1REG" 2 81 "0x39"
D G "TESTDAC2REG" 2 82 "0x3A"
D G "TESTADCREG" 2 83 "0x3B"
D G "RESERVED31" 2 84 "0x3C"
D G "RESERVED32" 2 85 "0x3D"
D G "RESERVED33" 2 86 "0x3E"
D G "RESERVED34" 2 87 "0x3F"
F N "MFRC522_Rd" 2 89 ""
V L "address" 2 89 "int8" `604 
F G "MFRC522_Rd" 2 89 "int8(int8 address)" `603 
V L "i" 2 90 "int8" `605 
V L "ucAddr" 2 90 "int8" `606 
V L "ucResult" 2 91 "int8" `607 
F N "MFRC522_Wr" 2 112 ""
V L "address" 2 112 "int8" `609 
V L "value" 2 112 "int8" `610 
F G "MFRC522_Wr" 2 112 "void(int8 address,int8 value)" `608 
V L "i" 2 113 "int8" `611 
V L "ucAddr" 2 113 "int8" `612 
F N "MFRC522_Clear_Bit" 2 133 ""
V L "addr" 2 133 "int8" `614 
V L "mask" 2 133 "int8" `615 
F G "MFRC522_Clear_Bit" 2 133 "void(int8 addr,int8 mask)" `613 
V L "tmp" 2 134 "int8" `616 
F N "MFRC522_Set_Bit" 2 139 ""
V L "addr" 2 139 "int8" `618 
V L "mask" 2 139 "int8" `619 
F G "MFRC522_Set_Bit" 2 139 "void(int8 addr,int8 mask)" `617 
V L "tmp" 2 140 "int8" `620 
F N "MFRC522_Reset" 2 145 ""
F G "MFRC522_Reset" 2 145 "void()" `621 
F N "MFRC522_AntennaOn" 2 156 ""
F G "MFRC522_AntennaOn" 2 156 "void()" `622 
V L "stt" 2 157 "int8" `623 
F N "MFRC522_AntennaOff" 2 162 ""
F G "MFRC522_AntennaOff" 2 162 "void()" `624 
F N "MFRC522_Init" 2 166 ""
F G "MFRC522_Init" 2 166 "void()" `625 
F N "MFRC522_ToCard" 2 180 ""
V L "command" 2 180 "int8" `627 
V L "sendData" 2 180 "*int8" `628 
V L "sendLen" 2 180 "int8" `629 
V L "backData" 2 180 "*int8" `630 
V L "backLen" 2 180 "*int8" `631 
F G "MFRC522_ToCard" 2 180 "int8(int8 command,*int8 sendData,int8 sendLen,*int8 backData,*int8 backLen)" `626 
V L "_status" 2 181 "int8" `632 
V L "irqEn" 2 182 "int8" `633 
V L "waitIRq" 2 183 "int8" `634 
V L "lastBits" 2 184 "int8" `635 
V L "n" 2 185 "int8" `636 
V L "i" 2 186 "int8" `637 
F N "MFRC522_Request" 2 250 ""
V L "reqMode" 2 250 "int8" `639 
V L "TagType" 2 250 "*int8" `640 
F G "MFRC522_Request" 2 250 "int8(int8 reqMode,*int8 TagType)" `638 
V L "_status" 2 251 "int8" `641 
V L "backBits" 2 252 "int8" `642 
F N "MFRC522_CRC" 2 262 ""
V L "dataIn" 2 262 "*int8" `644 
V L "length" 2 262 "int8" `645 
V L "dataOut" 2 262 "*int8" `646 
F G "MFRC522_CRC" 2 262 "void(*int8 dataIn,int8 length,*int8 dataOut)" `643 
V L "i" 2 263 "int8" `647 
V L "n" 2 263 "int8" `648 
F N "MFRC522_SelectTag" 2 279 ""
V L "serNum" 2 279 "*int8" `650 
F G "MFRC522_SelectTag" 2 279 "int8(*int8 serNum)" `649 
V L "i" 2 280 "int8" `651 
V L "_status" 2 281 "int8" `652 
V L "size" 2 282 "int8" `653 
V L "recvBits" 2 283 "int8" `654 
V L "buffer" 2 284 "int8[9]" `655 
F N "MFRC522_Halt" 2 300 ""
F G "MFRC522_Halt" 2 300 "void()" `656 
V L "unLen" 2 301 "int8" `657 
V L "buff" 2 302 "int8[4]" `658 
F N "MFRC522_AntiColl" 2 311 ""
V L "serNum" 2 311 "*int8" `660 
F G "MFRC522_AntiColl" 2 311 "int8(*int8 serNum)" `659 
V L "_status" 2 312 "int8" `661 
V L "i" 2 313 "int8" `662 
V L "serNumCheck" 2 314 "int8" `663 
V L "unLen" 2 315 "int8" `664 
F N "MFRC522_isCard" 2 332 ""
V L "TagType" 2 332 "*int8" `666 
F G "MFRC522_isCard" 2 332 "int8(*int8 TagType)" `665 
F N "MFRC522_ReadCardSerial" 2 337 ""
V L "str" 2 337 "*int8" `668 
F G "MFRC522_ReadCardSerial" 2 337 "int8(*int8 str)" `667 
V L "_status" 2 338 "int8" `669 
D G "__LCD_C__" 3 76 ""
T G "LCD_PIN_MAP" 3 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `676  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 3 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 3 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 3 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 3 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 3 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 3 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 3 187 "20"
F N "lcd_read_nibble" 3 190 ""
f G "lcd_read_nibble" 3 190 "int8()" `677 
F N "lcd_read_byte" 3 192 ""
F G "lcd_read_byte" 3 193 "int8()" `678 
V L "low" 3 194 "int8" `679 
V L "high" 3 194 "int8" `680 
F N "lcd_read_nibble" 3 239 ""
F G "lcd_read_nibble" 3 240 "int8()" `677 
V L "n" 3 242 "int8" `681 
C L "lcd_read_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_nibble" 3 256 ""
V L "n" 3 256 "int8" `683 
F G "lcd_send_nibble" 3 257 "void(int8 n)" `682 
C L "lcd_send_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_byte" 3 274 ""
V L "address" 3 274 "int8" `685 
V L "n" 3 274 "int8" `686 
F G "lcd_send_byte" 3 275 "void(int8 address,int8 n)" `684 
F N "lcd_init" 3 299 ""
F G "lcd_init" 3 300 "void()" `687 
V L "i" 3 301 "int8" `688 
V L "LCD_INIT_STRING" 3 302 "int8[4]" `689 
C L "lcd_init" 3 2 2 "FUNCTION"
F N "lcd_gotoxy" 3 345 ""
V L "x" 3 345 "int8" `691 
V L "y" 3 345 "int8" `692 
F G "lcd_gotoxy" 3 346 "void(int8 x,int8 y)" `690 
V L "address" 3 347 "int8" `693 
F N "lcd_putc" 3 363 ""
V L "c" 3 363 "int8" `695 
F G "lcd_putc" 3 364 "void(int8 c)" `694 
F N "lcd_getc" 3 406 ""
V L "x" 3 406 "int8" `697 
V L "y" 3 406 "int8" `698 
F G "lcd_getc" 3 407 "int8(int8 x,int8 y)" `696 
V L "value" 3 408 "int8" `699 
C L "lcd_getc" 3 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 3 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 3 424 ""
V L "which" 3 424 "int8" `701 
V L "ptr" 3 424 "*int8" `702 
F G "lcd_set_cgram_char" 3 425 "void(int8 which,*int8 ptr)" `700 
V L "i" 3 426 "int8" `703 
C L "lcd_set_cgram_char" 3 2 1 "FUNCTION"
F N "lcd_cursor_on" 3 443 ""
V L "on" 3 443 "int8" `705 
F G "lcd_cursor_on" 3 444 "void(int8 on)" `704 
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
V G "i" 0 27 "int8" `706 
V G "time" 0 27 "int8" `707 
V G "UID" 0 27 "int8[16]" `708 
V G "DatosTX" 0 27 "int8[11]" `709 
V G "DatosRX" 0 27 "int8[11]" `710 
V G "TagType" 0 28 "int8" `711 
V G "Precio" 0 29 "int32" `712 
V G "Tarjeta" 0 29 "int32" `713 
F N "SerialInterrupt" 0 32 ""
F G "SerialInterrupt" 0 32 "void()" `714 
F N "MAIN" 0 39 ""
F G "MAIN" 0 39 "void()" `715 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
